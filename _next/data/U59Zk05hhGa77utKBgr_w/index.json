{"pageProps":{"posts":[{"html":"<p>We will build a simpler version of <a href=\"https://todo.newcurrent.se/\">this</a> in this blog post. It goes through the steps of setting up an <a href=\"https://elm-lang.org/\"><code>Elm</code></a> project and the benefits of using <code>Elm</code> on the front-end and how it provides some really nice help for you as a developer.</p>\n<hr>\n<h1 id=\"prerequisites\">Prerequisites</h1>\n<p>You need a few things to get started. Knowledge of JavaScript, HTML and CSS is expected as this guide skips over all those steps and I recommend following my <a href=\"https://newcurrent.se/blog/containerized-development-environment\">devcontainer guide</a> and using an <code>Elm</code> container (instead of a <code>Node</code> container like that guide) since that eliminates any sort of installation process for you. For this tutorial I will be using a devcontainer, but if you want to install <code>Elm</code> on your local filesystem you can do so too by following the steps <a href=\"https://guide.elm-lang.org/install/elm.html\">here</a>. Knowing the basics of some functional programming concepts won&#39;t hurt either ðŸ˜Š.</p>\n<hr>\n<h1 id=\"the-elm-architecture\">The Elm architecture</h1>\n<p><code>Elm</code> uses something it refers to as <a href=\"https://guide.elm-lang.org/architecture/\"><code>The Elm Architecture</code></a>. This architecture is really useful when dealing with transformations of data and reactive updates. Perhaps you&#39;ve heard of a popular state management library called Redux? The Redux architecture is inspired by the one used in Elm. This pattern is built into <code>Elm</code>, so no need for a third-party lib.</p>\n<p>The Elm Architecture builds on three core principles:</p>\n<ul>\n<li>Model - The model (often called state in other frameworks) of your application</li>\n<li>View - Convert the model to HTML</li>\n<li>Update - Update the model</li>\n</ul>\n<p>You can already see how this architecture works: The model turns into HTML that is then acted upon (updated) which then triggers an update and the HTML is re-rendered etc. You can think of this as a render loop.</p>\n<hr>\n<h1 id=\"creating-a-basic-page\">Creating a basic page</h1>\n<p>Let&#39;s start by initializing the project, this is done by running the following:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>elm init</code></pre><p>This creates a folder called <code>src</code> and a file called <code>elm.json</code>. You can think of this like the <code>package.json</code> for a <code>node</code> project, basically it describes your project and its dependencies.</p>\n<p>Let&#39;s create our first page, create a page called <code>Main.elm</code> and place it in the <code>src</code> directory.</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-comment\">-- Don&#x27;t worry about this line, we can expose everything because</span>\n<span class=\"hljs-comment\">-- we will only be using this file, so exposing something doesn&#x27;t</span>\n<span class=\"hljs-comment\">-- matter</span>\n<span class=\"hljs-keyword\">module</span> Main <span class=\"hljs-keyword\">exposing</span> (..)\n\n<span class=\"hljs-comment\">-- Imports that we need the run our initial example</span>\n<span class=\"hljs-keyword\">import</span> Browser\n<span class=\"hljs-keyword\">import</span> Html <span class=\"hljs-keyword\">exposing</span> (<span class=\"hljs-type\">Html</span>, div, text)\n\n<span class=\"hljs-comment\">-- Initialize the empty record, this is used by Elm</span>\n<span class=\"hljs-comment\">-- to create the initial model</span>\n<span class=\"hljs-title\">init</span> : <span class=\"hljs-type\">Model</span>\n<span class=\"hljs-title\">init</span> =\n     <span class=\"hljs-type\">Model</span>\n\n\n<span class=\"hljs-comment\">-- We don&#x27;t have a type annotation here, which is normally</span>\n<span class=\"hljs-comment\">-- recommended but that&#x27;s okay because we don&#x27;t have to worry</span>\n<span class=\"hljs-comment\">-- about what this function returns</span>\n<span class=\"hljs-title\">main</span> =\n    <span class=\"hljs-type\">Browser</span>.sandbox { init = init, update = update, view = view }\n\n\n<span class=\"hljs-comment\">-- Right now, our Model is just an empty Record</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-keyword\">alias</span> <span class=\"hljs-type\">Model</span> =\n    {}\n\n\n<span class=\"hljs-comment\">-- Prepare the Msg type that will be used to trigger</span>\n<span class=\"hljs-comment\">-- updates in the render loop</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">Msg</span>\n    = <span class=\"hljs-type\">Never</span>\n\n\n<span class=\"hljs-comment\">-- Right now, whatever Msg we get we won&#x27;t update the model</span>\n<span class=\"hljs-comment\">-- Msg -&gt; Model -&gt; Model simplified means this function takes</span>\n<span class=\"hljs-comment\">-- in a Msg and a Model and produces a new Model.</span>\n<span class=\"hljs-title\">update</span> : <span class=\"hljs-type\">Msg</span> -&gt; <span class=\"hljs-type\">Model</span> -&gt; <span class=\"hljs-type\">Model</span>\n<span class=\"hljs-title\">update</span> msg model =\n    <span class=\"hljs-type\">Model</span>\n\n\n<span class=\"hljs-comment\">-- Our view is a function that takes the model and produces Html</span>\n<span class=\"hljs-comment\">-- and messages that in turn trigger the update function</span>\n<span class=\"hljs-title\">view</span> : <span class=\"hljs-type\">Model</span> -&gt; <span class=\"hljs-type\">Html</span> <span class=\"hljs-type\">Msg</span>\n<span class=\"hljs-title\">view</span> model =\n    div [] [ text <span class=\"hljs-string\">&quot;Hello world&quot;</span> ]</code></pre><p>Now that we have our <code>src/Main.elm</code> file set up, let&#39;s try to run our code and view it in a browser. We&#39;ll use <code>elm reactor</code> for this. <code>elm reactor</code> allows you to inspect your program in a file browser in the browser and whatever file you click on gets compiled and rendered, try it out by visiting <a href=\"http://localhost:8000\">http://localhost:8000</a> and browsing to <code>src/Main.elm</code> after running:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>elm reactor</code></pre><p>This should show you an HTML page that only contains the string <em>Hello world</em>.</p>\n<hr>\n<h1 id=\"adding-an-input-field-and-tying-it-to-our-model\">Adding an Input field and tying it to our Model</h1>\n<p>Our page is useless at the moment. All it does is display a static string and since we want to create a todo tracker, let&#39;s start by adding an input field where we can type our todos. Modify the <code>view</code> function to look like this instead:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-title\">view</span> model =\n    div []\n        [ input [] []\n        ]</code></pre><p>Also make sure you add <code>input</code> as an exposed field near the start of the file:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">import</span> Html <span class=\"hljs-keyword\">exposing</span> (<span class=\"hljs-type\">Html</span>, div, input, text)</code></pre><p>These HTML functions that correspond to HTML element names are functions that take two parameters, one list of attributes and one list of children, so our example with the updated model would generate HTML equal to this:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre><p>Now, our <code>input</code> can&#39;t really do anything, so we need to tie some behavior to it. Let&#39;s create a type of <code>Msg</code> for that, call it <code>UpdateInput</code>. Change the <code>type Msg</code> we created earlier to look like this:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">Msg</span>\n    = <span class=\"hljs-type\">UpdateInput</span> <span class=\"hljs-type\">String</span></code></pre><p>We also need to let our <code>Model</code> know that we need to track the state of a field:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">type</span> <span class=\"hljs-keyword\">alias</span> <span class=\"hljs-type\">Model</span> =\n    { value : <span class=\"hljs-type\">String</span> }</code></pre><p>The <code>Elm</code> compiler will complain now, because the type of our <code>Model</code> changed, so our <code>init</code> function needs to handle this new type of model:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-title\">init</span> =\n    { value = <span class=\"hljs-string\">&quot;&quot;</span> }</code></pre><p>And let&#39;s have our <code>input</code> fire the event when it&#39;s changed, let&#39;s also create a new <code>div</code> element to display whatever the value of our <code>model.value</code> is:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-comment\">-- Make sure to import the onInput event near the top of the file</span>\n<span class=\"hljs-keyword\">import</span> Html.Events <span class=\"hljs-keyword\">exposing</span> (onInput)\n\n<span class=\"hljs-comment\">-- ...</span>\n\n<span class=\"hljs-title\">view</span> model =\n    div []\n        [ input [ onInput <span class=\"hljs-type\">UpdateInput</span> ] []\n        , div [] [text model.value]\n        ]</code></pre><p>Now we need to let our <code>update</code> function react to this type of <code>Msg</code>:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-title\">update</span> msg model =\n    <span class=\"hljs-keyword\">case</span> msg <span class=\"hljs-keyword\">of</span>\n        <span class=\"hljs-comment\">-- Whenever we get the UpdateInput message, assign the new value to our state&#x27;s</span>\n        <span class=\"hljs-comment\">-- value and set that to be the new value. Whatever update returns is the new</span>\n        <span class=\"hljs-comment\">-- state of the application</span>\n        <span class=\"hljs-type\">UpdateInput</span> input -&gt;\n            { value = input }</code></pre><p>Run your app again and you should see that whatever you type into the <code>input</code> field is reflected on a line below.</p>\n<hr>\n<h1 id=\"creating-a-type-for-our-todo\">Creating a type for our Todo</h1>\n<p>We&#39;ve come pretty far already, our next step should be preparing the <code>type</code> needed by our application to track Todo items.</p>\n<p>Let&#39;s create a Todo alias type, this let&#39;s you treat the type Todo as a record consisting of the fields within:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">type</span> <span class=\"hljs-keyword\">alias</span> <span class=\"hljs-type\">Todo</span> =\n    { id : <span class=\"hljs-type\">Int</span>, task : <span class=\"hljs-type\">String</span>, isComplete : <span class=\"hljs-type\">Bool</span> }</code></pre><p>Our model should track the Todos, so that we can display them:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">type</span> <span class=\"hljs-keyword\">alias</span> <span class=\"hljs-type\">Model</span> =\n    { value : <span class=\"hljs-type\">String</span>, todos : <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Todo</span> }</code></pre><p>Again, the power of static typing will give two handy errors for us to fix, since our <code>Model</code> now contains one more field, we need to update both the <code>init</code> and <code>update</code> function:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-title\">init</span> =\n    <span class=\"hljs-comment\">-- Let the todo list be empty to start with</span>\n    { value = <span class=\"hljs-string\">&quot;&quot;</span>, todos = [] }\n\n<span class=\"hljs-comment\">-- ...</span>\n\n<span class=\"hljs-title\">update</span> msg model =\n    <span class=\"hljs-keyword\">case</span> msg <span class=\"hljs-keyword\">of</span>\n        <span class=\"hljs-type\">UpdateInput</span> input -&gt;\n            <span class=\"hljs-comment\">-- This is syntax sugar to let Elm know that when</span>\n            <span class=\"hljs-comment\">-- this message is fired, the model should stay</span>\n            <span class=\"hljs-comment\">-- unmodified except for the value property that</span>\n            <span class=\"hljs-comment\">-- should be set to the new value of the input field</span>\n            { model | value = input }</code></pre><p>That&#39;s great. We&#39;ve added a new type and handled the addition of it. You can&#39;t interact with it at all yet though, let&#39;s make that happen in the next section.</p>\n<hr>\n<h1 id=\"adding-todos-to-our-state\">Adding Todos to our state</h1>\n<p>First, we need a button we can press so that the value of our input is added as a todo in our Todo list.</p>\n<p>Let&#39;s start by defining a new type of message:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">Msg</span>\n    = <span class=\"hljs-type\">UpdateInput</span> <span class=\"hljs-type\">String</span>\n    | <span class=\"hljs-type\">AddTodo</span></code></pre><p>You&#39;ll notice our code has another error now. This is the beauty of <code>Elm</code>. You should see a compiler error telling you the following:</p>\n<p><img src=\"/images/elm/compiler_error.png\" alt=\"Compiler error in Elm\"></p>\n<p>This is amazing, the compiler is letting us know that we haven&#39;t handled the case of the <code>AddTodo</code> message and <code>Elm</code> has no idea what to do if that was to happen, so it&#39;s forcing us to deal with it immediately. Let&#39;s do that:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-title\">update</span> msg model =\n    <span class=\"hljs-keyword\">case</span> msg <span class=\"hljs-keyword\">of</span>\n        <span class=\"hljs-type\">UpdateInput</span> input -&gt;\n            { model | value = input }\n\n        <span class=\"hljs-type\">AddTodo</span> -&gt;\n            <span class=\"hljs-keyword\">case</span> model.value <span class=\"hljs-keyword\">of</span>\n                <span class=\"hljs-comment\">-- If the value of the input field is empty, do nothing</span>\n                <span class=\"hljs-string\">&quot;&quot;</span> -&gt;\n                    model\n\n                <span class=\"hljs-comment\">-- Whatever else the input field is set to, add it as a todo</span>\n                _ -&gt;\n                    { model\n                        | todos =\n                            <span class=\"hljs-comment\">-- Let&#x27;s update our todos field to include the new Todo item.</span>\n                            <span class=\"hljs-comment\">-- Its ID will be the number of todos at creation, its value</span>\n                            <span class=\"hljs-comment\">-- will be the value of our input and it will initially not</span>\n                            <span class=\"hljs-comment\">-- be marked as complete</span>\n                            { id = <span class=\"hljs-type\">List</span>.length model.todos, task = model.value, isComplete = <span class=\"hljs-type\">False</span> }\n                                <span class=\"hljs-comment\">-- (::) is a function in Elm that can be used to add something to the</span>\n                                <span class=\"hljs-comment\">-- front of a list</span>\n                                :: model.todos\n                    }</code></pre><p>Good. We&#39;re handling all the messages our app can pass at this stage. We&#39;re never firing the <code>AddTodo</code> message at the moment, let&#39;s implement that next and add a way to display our list of Todos:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-comment\">-- Make sure button is imported at the top for this step</span>\n<span class=\"hljs-keyword\">import</span> Html <span class=\"hljs-keyword\">exposing</span> (<span class=\"hljs-type\">Html</span>, button, div, input, text)\n\n<span class=\"hljs-comment\">-- And make sure the onClick event is included too</span>\n<span class=\"hljs-keyword\">import</span> Html.Events <span class=\"hljs-keyword\">exposing</span> (onClick, onInput)\n<span class=\"hljs-comment\">--...</span>\n\n<span class=\"hljs-comment\">-- Create a helper function to render our todos</span>\n<span class=\"hljs-title\">viewTodo</span> : <span class=\"hljs-type\">Todo</span> -&gt; <span class=\"hljs-type\">Html</span> <span class=\"hljs-type\">Msg</span>\n<span class=\"hljs-title\">viewTodo</span> t =\n    div [] [ text t.task ]\n\n<span class=\"hljs-title\">view</span> model =\n    div []\n        [ input [ onInput <span class=\"hljs-type\">UpdateInput</span> ] []\n        <span class=\"hljs-comment\">-- When we click the Add button, fire the AddTodo event</span>\n        , button [onClick <span class=\"hljs-type\">AddTodo</span>] [ text <span class=\"hljs-string\">&quot;Add&quot;</span> ]\n        <span class=\"hljs-comment\">-- Run all our todos through the viewTodo function</span>\n        , div [] (<span class=\"hljs-type\">List</span>.map viewTodo model.todos)\n        ]</code></pre><p>Run your app now and you should be able to type text into the input field and click add and you should see an increasing number of todos being added to the list.</p>\n<hr>\n<h1 id=\"summary\">Summary</h1>\n<p><code>Elm</code> is an excellent programming language in my opinion. The compiler really helps you out with extremely friendly error messages that tell you what you need to do to make it compile. Once it compiles, it&#39;s probably going to work.</p>\n<p>You can achieve close to no runtime errors by using Elm. Sure, writing the code up front might take a bit longer but Elms compiler really helps you when you need to refactor or fix bugs. <code>Elm</code> doesn&#39;t even have a concept of <code>null</code>! Everything must have a value.</p>\n<p>I think the barrier of entry to <code>Elm</code> is a big high, but if you have some basic functional programming experience and knowledge of HTML, CSS and JavaScript you should be able to create web apps with <code>Elm</code>.</p>\n<p>The repository for this app is here: <a href=\"https://github.com/simon-nystrom/basic-elm-todo\">https://github.com/simon-nystrom/basic-elm-todo</a>.</p>\n<p>I hope you found it interesting and that you&#39;ll try out <code>Elm</code> yourself!</p>\n","date":"2020-11-10","title":"Free of runtime errors with Elm","slug":"no-runtime-errors-elm","summary":"Learn about the basics of Elm and how it can help you eliminate runtime errors for good.","categories":[],"published":true,"tags":["elm","javascript"]},{"html":"<p>Although this post is part of a series, the aim is for the post to be able to stand on its own, you should be able to take away some knowledge even if you&#39;re not following the tutorial series. If you&#39;re interested, the tutorial series starts here: <a href=\"https://newcurrent.se/blog/initialize-nextjs-project\">Part 1</a>.</p>\n<hr>\n<h1 id=\"prerequisites\">Prerequisites</h1>\n<p>The prerequisites for this tutorial are stated in <a href=\"https://newcurrent.se/blog/initialize-nextjs-project\">Part 1</a> and the components we will be using in this tutorial are from <a href=\"https://newcurrent.se/blog/initialize-nextjs-project\">Part 1</a> and <a href=\"https://newcurrent.se/blog/nextjs-routing\">Part 2</a></p>\n<hr>\n<h1 id=\"styling-in-nextjs\">Styling in Next.js</h1>\n<p>There are multiple ways of styling your components in a Next.js project, just like in any other React project. I prefer using <a href=\"https://styled-components.com/\"><code>styled-components</code></a> though as they make it easy to modify the CSS and to have everything properly scoped out of the box, no worrying about clashing CSS classes and what not. This post will walk you through how to set up <code>styled-components</code> for your statically generated Next.js project.</p>\n<p>Some other approaches to styling include:</p>\n<ul>\n<li><a href=\"https://nextjs.org/learn/basics/assets-metadata-css/global-styles\">Global styles</a> (we will actually utilize this as well in a later tutorial in this series).</li>\n<li><a href=\"https://nextjs.org/docs/basic-features/built-in-css-support#adding-component-level-css\">CSS Modules</a></li>\n<li><a href=\"https://reactjs.org/docs/dom-elements.html#style\">Inline styling</a></li>\n</ul>\n<hr>\n<h1 id=\"enabling-styled-components-in-nextjs\">Enabling <code>styled-components</code> in Next.js</h1>\n<p>To enable <code>styled-components</code> in Next.js, we need to install some dependencies namely:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>yarn add -D styled-components babel-plugin-styled-components</code></pre><p><code>styled-components</code> is the library itself and <code>babel-plugin-styled-components</code> is needed to consistently hash <code>classNames</code> between environments (<code>styled-components</code> won&#39;t behave well with SSR/SSG otherwise).</p>\n<p>We also need to create our own <code>.babelrc</code> in the root of the project to be able to override the default babel behaviour used by Next.js:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>{\n    <span class=\"hljs-attr\">&quot;presets&quot;</span>: [\n        <span class=\"hljs-string\">&quot;next/babel&quot;</span>\n    ],\n    <span class=\"hljs-attr\">&quot;plugins&quot;</span>: [\n        <span class=\"hljs-string\">&quot;babel-plugin-styled-components&quot;</span>\n    ]\n}</code></pre><hr>\n<h1 id=\"extracting-and-styling-our-nav-bar\">Extracting and styling our nav bar</h1>\n<p>Our blog as we left it in <a href=\"https://newcurrent.se/blog/nextjs-routing\">part 2</a> isn&#39;t pretty. Let&#39;s change that and make it look more like an actual layout.</p>\n<p>Let&#39;s begin by extracting our inline <code>nav</code> from <code>_app.js</code> and make it its own component.</p>\n<p>Start by creating a folder called <code>components</code> at the root level and create a file called <code>NavBar.js</code> inside:</p>\n<p><code>components/NavBar.js</code></p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">import</span> styled <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;styled-components&quot;</span>\n<span class=\"hljs-keyword\">import</span> Link <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;next/link&quot;</span>\n\n<span class=\"hljs-keyword\">const</span> Nav = styled.nav<span class=\"hljs-string\">`\n  max-width: 56em;\n  margin: 0 auto;\n  padding: 0.4em;\n`</span>\n\n<span class=\"hljs-keyword\">const</span> Ul = styled.ul<span class=\"hljs-string\">`\n  display: flex;\n  padding: 0;\n`</span>\n\n<span class=\"hljs-keyword\">const</span> Li = styled.li<span class=\"hljs-string\">`\n  display: block;\n  padding: 0.4em;\n`</span>\n\n<span class=\"hljs-comment\">// Note that styled-components lets you use SCSS syntax</span>\n<span class=\"hljs-keyword\">const</span> A = styled.a<span class=\"hljs-string\">`\n  &amp;:hover {\n    color: blue;\n  }\n`</span>\n\n<span class=\"hljs-keyword\">const</span> NavBar = <span class=\"hljs-function\">() =&gt;</span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Nav</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Ul</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Li</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/&quot;</span> <span class=\"hljs-attr\">passHref</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">A</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">A</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Li</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Li</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/blog&quot;</span> <span class=\"hljs-attr\">passHref</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">A</span>&gt;</span>Blog<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">A</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Nav</span>&gt;</span></span>\n)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> NavBar</code></pre><p><code>_app.js</code> can now be simplified to look like this instead:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">import</span> NavBar <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../components/NavBar&quot;</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;../styles/globals.css&quot;</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyApp</span>(<span class=\"hljs-params\">{ Component, pageProps }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NavBar</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Component</span> {<span class=\"hljs-attr\">...pageProps</span>} /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n  )\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> MyApp</code></pre><hr>\n<h1 id=\"styling-our-other-components\">Styling our other components</h1>\n<p>Let&#39;s also add some basic styling to our other components so they look a little bit more pleasing. Feel free to experiment here with <code>styled-components</code> if you want to do something more advanced.</p>\n<p><code>pages/index.js</code></p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">import</span> styled <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;styled-components&quot;</span>\n\n<span class=\"hljs-keyword\">const</span> Main = styled.main<span class=\"hljs-string\">`\n  max-width: 56em;\n  padding: 0.8em;\n  margin: 0 auto;\n`</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Home</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Main</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Welcome!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>This is the main page<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Main</span>&gt;</span></span>\n  )\n}</code></pre><p><code>pages/blog/index.js</code></p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">import</span> Link <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;next/link&quot;</span>\n<span class=\"hljs-keyword\">import</span> styled <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;styled-components&quot;</span>\n<span class=\"hljs-keyword\">import</span> posts <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../_posts&quot;</span>\n\n<span class=\"hljs-keyword\">const</span> Main = styled.main<span class=\"hljs-string\">`\n  max-width: 56em;\n  padding: 0.8em;\n  margin: 0 auto;\n`</span>\n\n<span class=\"hljs-keyword\">const</span> Ul = styled.ul<span class=\"hljs-string\">`\n  padding: 0;\n`</span>\n\n<span class=\"hljs-keyword\">const</span> Li = styled.li<span class=\"hljs-string\">`\n  display: block;\n`</span>\n\n<span class=\"hljs-comment\">// Create a flex box wrapper that can group our blog post attributes</span>\n<span class=\"hljs-keyword\">const</span> BlogLink = styled.div<span class=\"hljs-string\">`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-bottom: 1px solid gray;\n  transition: margin-left 0.2s ease;\n\n  &amp;:hover {\n    margin-left: 20px;\n  }\n`</span>\n\n<span class=\"hljs-comment\">// Notice here on the Link element that we do not need passHref,</span>\n<span class=\"hljs-comment\">// that&#x27;s possible because the anchor tag is the direct child</span>\n<span class=\"hljs-comment\">// of the Link element</span>\n<span class=\"hljs-keyword\">const</span> BlogPage = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ posts }</span>) =&gt;</span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Main</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Ul</span>&gt;</span>\n      {posts.map((post) =&gt; (\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{post.slug}</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">blog</span>/${<span class=\"hljs-attr\">post.slug</span>}`}&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BlogLink</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>{post.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span>&gt;</span>{post.date}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">BlogLink</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Li</span>&gt;</span>\n      ))}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Main</span>&gt;</span></span>\n)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> BlogPage\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStaticProps</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">props</span>: {\n      posts,\n    },\n  }\n}</code></pre><p>This only really leaves us with one component left to style (<code>pages/blog/[slug].js</code>), I&#39;ll leave that as an exercise for the reader. If you want to see how I did it you can visit the repository <a href=\"https://github.com/simon-nystrom/nextjs-blog-example/tree/p3\">here</a>. </p>\n<hr>\n<p>Now we have a styled <code>Next.js</code> app that supports dynamic routing based on a data set ready to go for the next part of this tutorial series.</p>\n<p>Here&#39;s what my project looks like at this stage: <a href=\"https://github.com/simon-nystrom/nextjs-blog-example/tree/p3\">https://github.com/simon-nystrom/nextjs-blog-example/tree/p3</a></p>\n<p>I hope you&#39;ll keep following along with the tutorial, please don&#39;t hesitate to ask if you have any questions or tell me if I missed something!</p>\n","date":"2020-11-07 22:51","series_title":"Creating a blog with React and Next.js","title":"Styled Components in Next.js","slug":"nextjs-styled-components","part":3,"last_part":"?","summary":"Learn about using styled components in Next.js.","categories":[],"published":true,"tags":["react","javascript","nextjs","tutorial"]},{"html":"<p>Although this post is part of a series, the aim is for the post to be able to stand on its own, you should be able to take away some knowledge even if you&#39;re not following the tutorial series. If you&#39;re interested, the tutorial series starts here: <a href=\"https://newcurrent.se/blog/initialize-nextjs-project\">Part 1</a>.</p>\n<hr>\n<h1 id=\"prerequisites\">Prerequisites</h1>\n<p>The prerequisites for this tutorial are stated in <a href=\"https://newcurrent.se/blog/initialize-nextjs-project\">Part 1</a>.</p>\n<hr>\n<h1 id=\"basic-routing\">Basic routing</h1>\n<p>Routes in Next.js are constructed by keeping your folder structure in the way that you want your pages to be accessible in the browser. As we saw in the previous part of this tutorial, we&#39;re able to visit the root of the website and that&#39;s because we have an <code>index.js</code> file in the <code>pages</code> directory. </p>\n<p>The filename <code>index.js</code> is special in Next.js, it is what is served when you go to the root of the sub folder, like so:</p>\n<ul>\n<li><code>pages/index.js</code> -&gt; accessible at <code>/</code></li>\n<li><code>pages/blog/index.js</code> -&gt; accessible at <code>/blog</code></li>\n</ul>\n<p>Since we&#39;re building a blog, let&#39;s create this <code>pages/blog/index.js</code> file. Create a folder named <code>blog</code> inside the <code>pages</code> directory and create an <code>index.js</code> file in there:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">const</span> BlogPage = <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;This is the blog page!&quot;</span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> BlogPage;</code></pre><p>If you run your project now by running <code>yarn dev</code>, you&#39;ll see that if you go to <a href=\"http://localhost:3000\">http://localhost:3000</a> you&#39;ll see the contents of <code>pages/index.js</code> but if you instead visit <a href=\"http://localhost:3000/blog\">http://localhost:3000/blog</a> you&#39;ll be greeted with <em>This is the blog page!</em></p>\n<p>Basic routing is cool and all, but it&#39;s not useful when we want to build dynamic routes that can be content-driven. Let&#39;s create a dynamic route that we can use for our blog posts.</p>\n<hr>\n<h1 id=\"dynamic-routing\">Dynamic routing</h1>\n<p>Similarly to how basic routing uses the folder and file structure in the <code>pages</code> directory, so does dynamic routing.</p>\n<p>Dynamic routes can be constructed by naming a file like so: <code>[slug].js</code>. Let&#39;s create <code>pages/blog/[slug].js</code> and see what this actually does.</p>\n<p>If we go to <a href=\"http://localhost:3000/blog\">http://localhost:3000/blog</a> we see that it still works, that&#39;s good, we still want to be able to navigate to the <code>/blog</code> route.</p>\n<p>The <code>[slug].js</code> naming pattern makes it so that we can register routes dynamically at build time, let&#39;s add some code to our <code>[slug].js</code> file and look at how we can utilize this:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">const</span> BlogPost = <span class=\"hljs-function\">(<span class=\"hljs-params\">props</span>) =&gt;</span> <span class=\"hljs-built_in\">JSON</span>.stringify(props);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> BlogPost;\n\n<span class=\"hljs-comment\">// This function is ran by Next.js to determine which </span>\n<span class=\"hljs-comment\">// paths need to be created dynamically, here we&#x27;ve</span>\n<span class=\"hljs-comment\">// hardcoded one path that will be served when the</span>\n<span class=\"hljs-comment\">// slug matches &quot;my-first-blog-post&quot;</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStaticPaths</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">paths</span>: [{ <span class=\"hljs-attr\">params</span>: { <span class=\"hljs-attr\">slug</span>: <span class=\"hljs-string\">&quot;my-first-blog-post&quot;</span> } }],\n    <span class=\"hljs-attr\">fallback</span>: <span class=\"hljs-literal\">false</span>,\n  };\n}\n\n<span class=\"hljs-comment\">// params in getStaticPaths({params}) are from getStaticPaths.</span>\n<span class=\"hljs-comment\">// Next.js runs this function to determine what props to</span>\n<span class=\"hljs-comment\">// pass to our React component.</span>\n<span class=\"hljs-comment\">// In this case we see that we only have one possible path</span>\n<span class=\"hljs-comment\">// and that is the path to &quot;my-first-blog-post&quot;.</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStaticProps</span>(<span class=\"hljs-params\">{ params }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">props</span>: { <span class=\"hljs-attr\">slug</span>: params.slug } };\n}</code></pre><p>Visiting <a href=\"http://localhost:3000/blog/my-first-blog-post\">http://localhost:3000/blog/my-first-blog-post</a> now shows you the props passed to the <code>BlogPost</code> component and should show you <code>{&quot;slug&quot;:&quot;my-first-blog-post&quot;}</code>. As we can see, we have a prop called <code>slug</code>. That&#39;s from the <code>getStaticProps</code> function. If we try another path, that wasn&#39;t specified in the <code>getStaticPaths</code> function we&#39;ll notice that it gives a 404 response. All dynamic routes that use <code>getStaticProps</code> have to be specified by <code>getStaticPaths</code>.</p>\n<p>More info about this here:</p>\n<ul>\n<li><a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation\">getStaticPaths</a></li>\n<li><a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation\">getStaticProps</a></li>\n</ul>\n<hr>\n<h1 id=\"creating-paths-based-on-our-blog-posts\">Creating paths based on our blog posts</h1>\n<p>In the above section, I mentioned that all dynamic paths have to be specified in <code>getStaticPaths</code> if they use <code>getStaticProps</code>, while this is true, it&#39;s not useful doing all this by hand as it would get tedious quickly. Let&#39;s create a way to define these routes based on some fake blog posts.</p>\n<p>In the <code>pages</code> directory, create a file called <code>_posts.js</code>, we&#39;ll use this file to define our posts. For now, these will be hardcoded, in a later part of this series we will read in Markdown files and generate our posts based on those. </p>\n<p>You might see a pattern now by the way, remember the file called <code>_app.js</code>? That one is similar to this <code>_posts.js</code> file we just created. Files that begin with an underscore won&#39;t be interpreted as accessible pages by Next.js.</p>\n<p>Let <code>pages/posts.js</code> look like this:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-comment\">// Hardcoded for now to demonstrate dynamic routing.</span>\n<span class=\"hljs-comment\">// We&#x27;ll generate this list based on Markdown files</span>\n<span class=\"hljs-comment\">// in a later part of this tutorial series</span>\n<span class=\"hljs-keyword\">const</span> posts = [\n  {\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&quot;My first blog post!&quot;</span>,\n    <span class=\"hljs-attr\">slug</span>: <span class=\"hljs-string\">&quot;my-first-blog-post&quot;</span>,\n    <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&quot;2020-11-05&quot;</span>,\n  },\n  {\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&quot;My second blog post!&quot;</span>,\n    <span class=\"hljs-attr\">slug</span>: <span class=\"hljs-string\">&quot;my-second-blog-post&quot;</span>,\n    <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&quot;2020-11-06&quot;</span>,\n  },\n];\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> posts;</code></pre><p>and modify <code>pages/blog/[slug].js</code> file to use this new <code>_posts.js</code> file:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">import</span> posts <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../_posts&quot;</span>;\n\n<span class=\"hljs-comment\">// This post argument is passed from getStaticProps</span>\n<span class=\"hljs-keyword\">const</span> BlogPost = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ post }</span>) =&gt;</span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{post.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{post.date}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span></span>\n);\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> BlogPost;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStaticPaths</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-comment\">// Map all the posts to objects with the slug in the params object</span>\n    <span class=\"hljs-comment\">// since we want all our pages to be accessible, the paths array</span>\n    <span class=\"hljs-comment\">// needs to contain a list of all the posts slugs</span>\n    paths: posts.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">post</span>) =&gt;</span> ({ <span class=\"hljs-attr\">params</span>: { <span class=\"hljs-attr\">slug</span>: post.slug } })),\n    <span class=\"hljs-attr\">fallback</span>: <span class=\"hljs-literal\">false</span>,\n  };\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStaticProps</span>(<span class=\"hljs-params\">{ params }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">props</span>: {\n      <span class=\"hljs-comment\">// Since our slug should be unique we can use</span>\n      <span class=\"hljs-comment\">// it to find the post with the matching slug,</span>\n      <span class=\"hljs-comment\">// this will be the post we need to render</span>\n      post: posts.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">post</span>) =&gt;</span> post.slug === params.slug),\n    },\n  };\n}</code></pre><p><em>It might look like React is missing as an import in the above code snippet, but Next.js actually lets us skip this declaration.</em></p>\n<p>Let&#39;s also make our <a href=\"http://localhost:3000/blog\">http://localhost:3000/blog</a> page a bit more useful:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">import</span> Link <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;next/link&quot;</span>;\n<span class=\"hljs-keyword\">import</span> posts <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../_posts&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> BlogPage = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ posts }</span>) =&gt;</span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n    {posts.map((post) =&gt; (\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{post.slug}</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">blog</span>/${<span class=\"hljs-attr\">post.slug</span>}`}&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>&gt;</span>{post.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    ))}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span>\n);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> BlogPage;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getStaticProps</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">props</span>: {\n      posts,\n    },\n  };\n}</code></pre><hr>\n<h1 id=\"creating-a-nav-bar\">Creating a nav bar</h1>\n<p>While our page works, getting to and from blog posts is really annoying and our home page isn&#39;t even usable, it just says <em>Home sweet home</em>. Let&#39;s add a nav bar that shows up on every sub page, including the home page.</p>\n<p>To do this, we can modify the <code>pages/_app.js</code> file. This file is ran for every page and code present in this component will be run for all pages. For more info about the <code>pages/_app.js</code> file you can check out the previous entry in this tutorial series or read more <a href=\"https://nextjs.org/docs/advanced-features/custom-app\">here</a>.</p>\n<p>Modify your <code>pages/_app.js</code> to look like this:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">import</span> Link <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;next/link&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;../styles/globals.css&quot;</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyApp</span>(<span class=\"hljs-params\">{ Component, pageProps }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nav</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/blog&quot;</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>&gt;</span>Blog<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nav</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Component</span> {<span class=\"hljs-attr\">...pageProps</span>} /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> MyApp;</code></pre><p>Try your app out now, navigate around a bit and you should see that the links to Home and Blog are always present at the top of the page and you can use those to navigate around, similarly you can navigate to the blog posts from the Blog page.</p>\n<hr>\n<p>Now we have a <code>Next.js</code> app that supports dynamic routing based on a data set ready to go for the next part of this tutorial series.</p>\n<p>Here&#39;s what my project looks like at this stage: <a href=\"https://github.com/simon-nystrom/nextjs-blog-example/tree/p2\">https://github.com/simon-nystrom/nextjs-blog-example/tree/p2</a></p>\n<p>I hope you&#39;ll keep following along with the tutorial, please don&#39;t hesitate to ask if you have any questions or tell me if I missed something!</p>\n","date":"2020-11-05 22:51","series_title":"Creating a blog with React and Next.js","title":"Routing in Next.js","slug":"nextjs-routing","part":2,"last_part":"?","summary":"Learn about routing and dynamic routes in Next.js.","categories":[],"published":true,"tags":["react","javascript","nextjs","tutorial"]},{"html":"<p>This tutorial series shows you how to create a blog similar to the one on my site: <a href=\"https://newcurrent.se\">https://newcurrent.se</a>, and how to host it on GitHub Pages, it won&#39;t be locked to host on GitHub Pages though, the result will be a site that is able to be statically exported and hosted anywhere.</p>\n<p>I made a post in the past describing how to create a blog using Sapper, but I&#39;ve decided to migrate to <a href=\"https://nextjs.org/\"><code>Next.js</code></a> because I&#39;m more versed in React and I wanted to try something new. I&#39;ve used Gatsby in the past so I thought, why not try Next.js this time.</p>\n<hr>\n<h1 id=\"prerequisites\">Prerequisites</h1>\n<p>You don&#39;t need a lot of programming experience to follow this tutorial, I wouldn&#39;t recommend this tutorial series unless you have some HTML, CSS and JavaScript knowledge and some knowledge of how <code>React</code> works though. The focus will be more on how <code>Next.js</code> can help us build our blog rather than what <code>React</code> helps us do. You are also expected how to use GitHub to create a repository.</p>\n<p>All you really need other than that is a <code>node</code> version that is high enough to support <code>npx</code> and a GitHub account.</p>\n<p>I will be using <code>yarn</code> for this project, but using <code>npm</code> is fine as well. The syntax varies slightly but generally <code>yarn</code> does not need to specify <code>run</code> to run something, see example below:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>yarn dev\n<span class=\"hljs-comment\"># is the same as</span>\nnpm run dev</code></pre><p>Let&#39;s get started ðŸ˜Š</p>\n<hr>\n<h1 id=\"initializing-the-project\">Initializing the project</h1>\n<p>To initialize a new <code>Next.js</code> project, all we have to do is run the following code:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>npx create-next-app my-blog\n<span class=\"hljs-built_in\">cd</span> my-blog</code></pre><p>This will create a project in a folder called <code>my-blog</code> (you can name it whatever you want) and set up all the basics needed for the project and then change your working directory to be <code>my-blog</code>.</p>\n<p>If you want to try running the app already, you can do so by running <code>yarn dev</code> or <code>npm run dev</code> and visiting <a href=\"http://localhost:3000\">http://localhost:3000</a>.</p>\n<hr>\n<h1 id=\"file-overview-and-walkthrough\">File overview and walkthrough</h1>\n<p>Let&#39;s look at the file and directory tree that <code>create-next-app</code> created for us:</p>\n<p><img src=\"/images/next/nextjs_folder_structure.png\" alt=\"Next.js folder structure\"></p>\n<h3 id=\"next\">.next</h3>\n<p>Contains files needed by the Next.js framework. No need to touch this folder.</p>\n<h3 id=\"node_modules\">node_modules</h3>\n<p>Contains dependencies for our project. No need to touch this folder.</p>\n<h3 id=\"pages\">pages</h3>\n<p>This folder is used by Next.js. It looks here at our JavaScript files to determine what the routes in our page will look like and how they will work. We&#39;ll go through this in more detail further down the page. This is the primary folder used in a Next.js project.</p>\n<h3 id=\"public\">public</h3>\n<p>This is where you put all the things that you want to be reached statically on your hosted site like images and the favicon.</p>\n<h3 id=\"styles\">styles</h3>\n<p>Use this folder for your global CSS stylesheets and your CSS modules. You can remove the <code>Home.module.css</code> file from this folder as we won&#39;t be using that.</p>\n<p>Those are the folders in a Next.js project, we&#39;ll probably create a component directory later where we can organize our React components, but for now this is all we have. Let&#39;s go through the contents of the <code>pages</code> folder.</p>\n<h2 id=\"the-pages-folder\">The pages folder</h2>\n<p>First of all, let&#39;s remove the <code>api</code> folder, we don&#39;t need that.</p>\n<p>Let&#39;s look at <code>_app.js</code> and <code>index.js</code> a bit closer, they are important.</p>\n<h4 id=\"_appjs\">_app.js</h4>\n<p><code>_app.js</code> looks like this:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;../styles/globals.css&#x27;</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyApp</span>(<span class=\"hljs-params\">{ Component, pageProps }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Component</span> {<span class=\"hljs-attr\">...pageProps</span>} /&gt;</span></span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> MyApp</code></pre><p>Seems innocuous, and it is at this stage. The <code>_app.js</code> is executed for all your pages defined in the <code>pages</code> directory, it is passed to the <code>MyApp</code> function as the <code>Component</code> argument and is accessible here. We&#39;ll be using the <code>MyApp</code> component in another part of this tutorial series to define things we want present on all pages, like a header and a footer. For now this code does nothing but return the page as it is handed to it.</p>\n<h4 id=\"indexjs\">index.js</h4>\n<p><code>index.js</code> is a big longer and we&#39;ll actually remove the majority of it, you want your <code>index.js</code> to look like this before moving on with the next part of this tutorial: </p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Home</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Home sweet home&quot;</span>;\n}</code></pre><p>This <code>index.js</code> file is what will be served when we visit the root of our site. Start your project by running <code>yarn dev</code> and then visit <a href=\"http://localhost:3000/\">http://localhost:3000/</a> and you should see a basic web site that just says <em>Home sweet home</em>.</p>\n<hr>\n<h1 id=\"adding-our-project-to-github\">Adding our project to GitHub</h1>\n<p>Only storing our code locally is not safe or good practice, let&#39;s create a repository on GitHub and push our code there. Since this is one of the prerequisites, I assume you already know how to do this. Just make sure the project you create is an empty project that is not initialized with any files like a <code>README.md</code> or a license file.</p>\n<p>Once you&#39;ve created your GitHub account, follow the steps they provide:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>git remote add origin git@github.com:&lt;your_username&gt;/&lt;your_github_project&gt;.git\ngit branch -M main\ngit push -u origin main</code></pre><hr>\n<p>Now we have a basic <code>Next.js</code> set up and ready to go for the next part of this tutorial series.</p>\n<p>Here&#39;s what my project looks like at this stage: <a href=\"https://github.com/simon-nystrom/nextjs-blog-example/tree/p1\">https://github.com/simon-nystrom/nextjs-blog-example/tree/p1</a></p>\n<p>I hope you&#39;ll follow along with the tutorial, please don&#39;t hesitate to ask if you have any questions or tell me if I missed something!</p>\n","date":"2020-11-05","series_title":"Creating a blog with React and Next.js","title":"Initializing a Next.js project","slug":"initialize-nextjs-project","part":1,"last_part":"?","summary":"Initialize a Next.js project and get it up and running with a basic page.","categories":[],"published":true,"tags":["react","javascript","nextjs","tutorial"]},{"html":"<p>Sometimes you want to access data on the web that isn&#39;t easily available through an API. For that, web scraping is a viable alternative. Web scraping is in essence a way to programmatically visit a web site as if you were a browser and fetch the data that way. This tutorial post will guide you through the process of web scraping using Python3, and two libraries <a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/\">BeautifulSoup</a> and <a href=\"https://requests.readthedocs.io/en/master/\">Requests</a>. As an example, we will build a command line application to search and print ratings for movies and TV shows on IMDB.</p>\n<hr>\n<h1 id=\"project-setup\">Project setup</h1>\n<p>To follow along with the tutorial you will need to have the following:</p>\n<ul>\n<li><a href=\"https://www.python.org/downloads/\">Python</a> installed</li>\n<li>Some basic knowledge of Python and some basic HTML/CSS knowledge</li>\n</ul>\n<p>Alternatively you can check out <a href=\"https://newcurrent.se/blog/containerized-development-environment\">my blog post for using dev containers</a> and follow that guide but select the <code>Python 3</code> container spec when creating the dev container. If you can&#39;t get the dev container way to work, you can refer to the <a href=\"https://github.com/simon-nystrom/simple-web-scrape\">repository for this blog post</a>.</p>\n<p>Let&#39;s begin by creating a folder for our project and installing the required dependencies:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>mkdir web-scrape\n<span class=\"hljs-built_in\">cd</span> web-scrape\npip3 install beautifulsoup4 requests</code></pre><ul>\n<li><code>beautifulsoup4</code> lets us easily access DOM elements programmatically</li>\n<li><code>requests</code> gives us a nice and easy to use interface to make HTTP requests</li>\n</ul>\n<hr>\n<h1 id=\"researching-the-applications-lifecycle\">Researching the application&#39;s lifecycle</h1>\n<p>As stated in the introduction, we&#39;re going to focus on searching on IMDB showing the rating for some selected title. Our first step should be to do these steps in a browser and see what it looks like there.</p>\n<p>Visit <a href=\"http://www.imdb.com\">www.imdb.com</a> in your browser and search for a movie of your choice. I searched for <em>Jurassic Park</em>, you should be greeted with something like the following image:</p>\n<p><img src=\"/images/imdb/jurassic_park_search_res.png\" alt=\"Jurassic Park search result on IMDB\"></p>\n<p>Once you&#39;re on this page, inspect one of the rows in the <em>&quot;Titles&quot;</em> table by right clicking and pressing <em>&quot;Inspect element&quot;</em>, this varies from browser to browser but in Firefox it looks like this:</p>\n<p><img src=\"/images/imdb/inspect_element.png\" alt=\"Inspect element\"></p>\n<p>You might also have noticed that something opened up at the bottom of your browser, that section is commonly referred to as the dev tools. We&#39;ll be using that now to figure out the structure of the data that we&#39;re after. At the time of writing this, it looks like this:</p>\n<p><img src=\"/images/imdb/dev_tools.png\" alt=\"Dev tools open\"></p>\n<p>What&#39;s displayed here is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">DOM</a> structure. The highlighted row here is what I selected when taking the <em>&quot;Inspect element&quot;</em> action earlier. This shows us how all the HTML nodes relate to each other and where in the DOM the data we&#39;re after is located. Since we want to be able to list these results in our application, we need to be able to present these search results.</p>\n<p>We can see that the data we&#39;re interested in is located inside the <code>&lt;td&gt;</code> element with the class <code>result_text</code>, the name of the title is wrapped in an <code>&lt;a&gt;</code> element with the <code>href</code> holding the relative link to the title. This is all the data we need from this page.</p>\n<p>Let&#39;s follow the link to this title to see what the next page we need to tackle looks like, click the link to one of the search results and you should end up on the page for the movie/show you picked:</p>\n<p><img src=\"/images/imdb/jurassic_park.png\" alt=\"Jurassic park\"></p>\n<p>When on this page, let&#39;s repeat the step and <em>&quot;Inspect element&quot;</em> on the rating display:</p>\n<p><img src=\"/images/imdb/inspect_element_2.png\" alt=\"Inspect rating element\">\n<img src=\"/images/imdb/dev_tools_2.png\" alt=\"Dev tools on inspect rating element\"></p>\n<p>Here we can see that for this page the data we&#39;re interested in is located inside a <code>span</code> element wrapped by a <code>strong</code> element that is in turn wrapped by a <code>div</code> element with the class <code>ratingValue</code>.</p>\n<p>Now that we have gathered all the information we need for our app, let&#39;s proceed to the coding part.</p>\n<hr>\n<h1 id=\"searching-on-imdb-and-listing-the-titles\">Searching on IMDB and listing the titles</h1>\n<p>Create a file <code>scrape.py</code>, this will be our only file for this project. In it we will begin by importing the required dependencies and adding search functionality:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-comment\"># scrape.py</span>\n<span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">from</span> bs4 <span class=\"hljs-keyword\">import</span> BeautifulSoup\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">search</span>(<span class=\"hljs-params\">search_term</span>):</span>\n    <span class=\"hljs-comment\"># Make the search request to IMDB</span>\n    response = requests.get(<span class=\"hljs-string\">f&quot;https://www.imdb.com/find?q=<span class=\"hljs-subst\">{search_term}</span>&quot;</span>)\n    html = response.text\n    soup = BeautifulSoup(html, <span class=\"hljs-string\">&quot;html.parser&quot;</span>)\n    <span class=\"hljs-comment\"># Find the table with the class findList</span>\n    table = soup.find(<span class=\"hljs-string\">&quot;table&quot;</span>, {<span class=\"hljs-string\">&quot;class&quot;</span>: <span class=\"hljs-string\">&quot;findList&quot;</span>})\n    <span class=\"hljs-comment\"># Use CSS selector syntax to get all td elements from the table with the class result_text</span>\n    rows = table.select(<span class=\"hljs-string\">&quot;tr td.result_text&quot;</span>)\n    <span class=\"hljs-comment\"># Construct a list with the search results, store the title and the href in dicts</span>\n    <span class=\"hljs-keyword\">return</span> [{<span class=\"hljs-string\">&quot;title&quot;</span>: row.get_text().strip(), <span class=\"hljs-string\">&quot;href&quot;</span>: row.a[<span class=\"hljs-string\">&#x27;href&#x27;</span>]} <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> rows]</code></pre><p>Let&#39;s add another function to this file where we&#39;ll place our user interaction code:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>():</span>\n    search_term = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Search IMDB: &quot;</span>)\n    results = search(search_term)\n    num_results = <span class=\"hljs-built_in\">len</span>(results)\n    print(<span class=\"hljs-string\">f&quot;Found <span class=\"hljs-subst\">{num_results}</span> results:&quot;</span>)\n    <span class=\"hljs-comment\"># Use built-in function enumerate to access the index variable i</span>\n    <span class=\"hljs-keyword\">for</span> i, result <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(results):\n        print(<span class=\"hljs-string\">f&quot;(<span class=\"hljs-subst\">{i+<span class=\"hljs-number\">1</span>}</span>) <span class=\"hljs-subst\">{result[<span class=\"hljs-string\">&#x27;title&#x27;</span>]}</span>&quot;</span>)\n\n<span class=\"hljs-comment\"># Don&#x27;t forget this line! We have to call the run function or nothing will happen when we run our program.</span>\nrun()</code></pre><p>Save the file and we&#39;re ready to try our app to see what it looks like right now, run it by going to the terminal and running:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>python3 scrape.py</code></pre><p>Enter a search term and something similar should show up:</p>\n<p><img src=\"/images/imdb/in_app_search_res.png\" alt=\"in app search results\"></p>\n<p>You might notice that selecting a result does nothing at the moment, and that&#39;s cause we only implemented half the logic. It&#39;s always good to test that what you&#39;ve got so far is working at least, and if you&#39;re seeing search results in your terminal then you&#39;re good to continue.</p>\n<hr>\n<h1 id=\"printing-the-rating-for-the-selected-title\">Printing the rating for the selected title</h1>\n<p>We need some more logic to request the next page and print the value from the <code>span</code> element we identified earlier. You may have noticed that in the <code>search</code> function we defined, we&#39;re returning the <code>href</code>s but we&#39;re yet to use them. Let&#39;s incorporate them now.</p>\n<p>In <code>scrape.py</code>, add another function:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_rating</span>(<span class=\"hljs-params\">href</span>):</span>\n    <span class=\"hljs-comment\"># href passed in here should be from what we found earlier, the href from the &lt;a&gt; tag that the title was wrapped in</span>\n    response = requests.get(<span class=\"hljs-string\">f&quot;https://www.imdb.com<span class=\"hljs-subst\">{href}</span>&quot;</span>)\n    html = response.text\n    soup = BeautifulSoup(html, <span class=\"hljs-string\">&quot;html.parser&quot;</span>)\n    <span class=\"hljs-comment\"># Select by CSS selector for .ratingValue class and get the first result (index 0), we only expect there to be one</span>\n    rating = soup.select(<span class=\"hljs-string\">&quot;.ratingValue&quot;</span>)[<span class=\"hljs-number\">0</span>].span.get_text()\n    <span class=\"hljs-keyword\">return</span> rating</code></pre><p>And let&#39;s use it in our <code>run</code> function:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>():</span>\n    <span class=\"hljs-comment\"># Main interaction</span>\n    search_term = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Search IMDB: &quot;</span>)\n    results = search(search_term)\n    num_results = <span class=\"hljs-built_in\">len</span>(results)\n\n    print(<span class=\"hljs-string\">f&quot;Found <span class=\"hljs-subst\">{num_results}</span> results:&quot;</span>)\n    <span class=\"hljs-keyword\">for</span> i, result <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(results):\n        print(<span class=\"hljs-string\">f&quot;(<span class=\"hljs-subst\">{i+<span class=\"hljs-number\">1</span>}</span>) <span class=\"hljs-subst\">{result[<span class=\"hljs-string\">&#x27;title&#x27;</span>]}</span>&quot;</span>)\n\n    <span class=\"hljs-comment\"># Convert to int and subtract one to undo the addition to the index in the above loop</span>\n    selection = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">f&quot;Select by entering a number (1-<span class=\"hljs-subst\">{num_results}</span>): &quot;</span>)) - <span class=\"hljs-number\">1</span>\n    selected_result = results[selection]\n    <span class=\"hljs-comment\"># Pass in the href to the title we want to get the rating for</span>\n    rating = get_rating(selected_result[<span class=\"hljs-string\">&quot;href&quot;</span>])\n\n    print(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{selected_result[<span class=\"hljs-string\">&#x27;title&#x27;</span>]}</span> has a rating of <span class=\"hljs-subst\">{rating}</span>!&quot;</span>)\n\n<span class=\"hljs-comment\"># Again, make sure you call this in scrape.py</span>\nrun()</code></pre><p>Running our app now results in the following behavior:</p>\n<p><img src=\"/images/imdb/final.png\" alt=\"Final output\"></p>\n<hr>\n<h1 id=\"summary\">Summary</h1>\n<p>If you can use an API to get ahold of the data that you&#39;re after, you should always do so, it&#39;s faster and less prone to errors. Scraping the web can get messy sometimes depending on the structure of the DOM. As you may have already figured out, if something was to change on the layout of IMDB, it would potentially break our app.</p>\n<p>I hope you learned something new and that you find the information provided here useful, maybe you were looking to use data from some site in your own project? Go ahead and try it out ðŸ˜Š.</p>\n<p>Feel free to ask any questions.</p>\n<p>Enjoy! <a href=\"https://github.com/simon-nystrom/simple-web-scrape\">Here</a> is the associated repository for this post.</p>\n","date":"2020-11-01","title":"Web scraping with Python","slug":"web-scraping-python","summary":"Learn how to scrape web sites to access information programmatically using Python3, BeautifulSoup and Requests.","categories":[],"published":true,"tags":["python","web-scraping","requests","tutorial","beautifulsoup"]},{"html":"<p>Static websites are all the jam these days and you might have heard about the <a href=\"https://jamstack.org/\">JAMStack</a>. Static sites allow you to host very performant pre-built sites like my example site <a href=\"https://interest.newcurrent.se\">Compound interest calculator</a>. Some popular static site frameworks include <a href=\"https://sapper.svelte.dev/\">Sapper</a> (uses Svelte), <a href=\"https://nextjs.org/\">Next.js</a> and <a href=\"https://www.gatsbyjs.com/\">Gatsby</a> (uses React) and <a href=\"https://vuepress.vuejs.org/\">VuePress</a> (ses Vue). This tutorial will show you how to build and host a static site on Netlify by using a GitHub repository for your code. For this tutorial I will be using Sapper, but any of the frameworks above should do just fine.</p>\n<hr>\n<h1 id=\"project-setup\">Project setup</h1>\n<p>To follow along with the blog you will need to have the following:</p>\n<ul>\n<li><a href=\"https://nodejs.org/en/download/\">Node</a> installed</li>\n<li>A <a href=\"https://github.com/\">GitHub</a> account and an empty repository</li>\n<li>A <a href=\"https://www.netlify.com/\">Netlify</a> account</li>\n<li>A GitHub project with the code for your static site</li>\n<li>Knowledge of how your chosen framework creates bundles ready for static hosting</li>\n</ul>\n<p>Initialize your project with your tool of choice. Since I&#39;m using sapper, it&#39;s done by running the following command:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>npx degit <span class=\"hljs-string\">&quot;sveltejs/sapper-template#rollup&quot;</span> my-static-site\n<span class=\"hljs-built_in\">cd</span> my-static-site\nnpm install</code></pre><p>Sapper sites are prepared for static site hosting by running the <code>export</code> command like below, (if you aren&#39;t following along with Sapper run whatever is the corresponding built/export command for your chosen site)</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>npm run <span class=\"hljs-built_in\">export</span></code></pre><p>The above step isn&#39;t crucial, but it helps to know that your app can be served statically. To test our exported Sapper app, we can run the following in our terminal (if you&#39;re using another framework, look in the documentation how to serve your site statically):</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>npx serve __sapper__/export</code></pre><p>This will start a local webserver on your computer and it should greet you with something like the following image:</p>\n<p><img src=\"/images/sapper/npx_serve_startup.png\" alt=\"serve start up indicator\"></p>\n<p>Visit the URL in the above notification and make sure your site is served properly.</p>\n<hr>\n<h1 id=\"pushing-our-site-to-github\">Pushing our site to GitHub</h1>\n<p>Now that we&#39;ve made sure our site can be hosted and accessed statically, it&#39;s time to push our site to GitHub to prepare it for release on Netlify.</p>\n<p>Let&#39;s initialize our project directory as a git repository:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>git init\ngit add .\ngit commit -m <span class=\"hljs-string\">&quot;Initial commit&quot;</span></code></pre><p>I mentioned in the intro that you need will need an empty (don&#39;t initialize it with a README, gitignore or license) GitHub repository. If you don&#39;t have one, go to your <a href=\"https://github.com/\">GitHub account</a> and create a new repository.</p>\n<p>To be able to push our code to GitHub, we need to run the following commands to connect our local repo to the remote. Replace <code>my-username</code> with your GitHub username and <code>my-static-site</code> with the name of your GitHub repo.</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>git remote add origin git@github.com:my-username/my-static-site.git\ngit branch -M main\ngit push -u origin main</code></pre><p>If you refresh your GitHub repository after this, you should see your code there.</p>\n<hr>\n<h1 id=\"deploying-our-site-to-netlify\">Deploying our site to Netlify</h1>\n<p>Log in to your <a href=\"https://www.netlify.com/\">Netlify</a> account and go to the <code>Team overview</code> tab. Here you should see something similar to the image below:</p>\n<p><img src=\"/images/netlify/netlify_sites.png\" alt=\"Netlify sites\"></p>\n<p>All we have to do now is complete the following steps:</p>\n<ol>\n<li>Click on <code>New site from Git</code>, this takes you to a three step process, the first being <code>1. Connect to Git Provider</code></li>\n<li>Click on <code>GitHub</code> under the Continuous Deployment header to proceed</li>\n<li>Go through the Netlify/GitHub auth process and make sure to allow Netlify access to your new repository. This takes you to section <code>2. Pick a repository</code>.</li>\n<li>Select your repository from the list. This takes you to section <code>3. Build options, and deploy!</code>.</li>\n<li>Fill out the information, for Sapper this involves the following settings (follow your chosen frameworks docs for this process if you&#39;re using something else):<ul>\n<li>Owner should be yourself</li>\n<li><code>Branch to deploy</code> should be set to <code>main</code></li>\n<li>Build command should be <code>npm run export</code></li>\n<li>Publish directory should be <code>__sapper__/export</code></li>\n</ul>\n</li>\n<li>Click <code>Deploy site</code>.</li>\n</ol>\n<p>After completing the steps above, you should be sent to a view that looks something like this:</p>\n<p><img src=\"/images/netlify/netlify_built.png\" alt=\"Netlify built\"></p>\n<p>Visiting that URL should take you to your deployed app ðŸ˜Ž.</p>\n<hr>\n<h1 id=\"redeploying-our-site-after-updating-it\">Redeploying our site after updating it</h1>\n<p>One of the best things with Netlify is that once we push changes to the <code>main</code> branch, Netlify will build and deploy our project with all the new changes.</p>\n<p>Go ahead and change something in your project and commit and push it to GitHub. Once that&#39;s done you can head over to the <code>Deploys</code> tab on Netlify under your site and see that a new deploy is in progress.</p>\n<p>Once it&#39;s deployed, you can visit your site again and see your changes.</p>\n<hr>\n<h1 id=\"summary\">Summary</h1>\n<p>Hosting your site on Netlify is a great option if you&#39;re just serving static content and you want to get something up and running quickly on the web. Netlify supports a bunch of other features like custom domain names, plugins and analytics that aren&#39;t free and I have yet to try them but I&#39;m impressed so far.</p>\n<p>Feel free to ask any questions. ðŸ™‚</p>\n","date":"2020-10-26","title":"Host a static website for free using Netlify and GitHub","slug":"host-static-website-netlify","summary":"Learn how to host your static website for free by using Sapper, Netlify and GitHub.","categories":[],"published":true,"tags":["svelte","sapper","netlify","javascript"]},{"html":"<p>This post will walk you through how to create your own base for a CRUD (Create, Read, Update, Delete) API that will handle todos. We will be using Node.js, MongoDB, Express and Mongoose to create the API. </p>\n<hr>\n<h1 id=\"project-setup\">Project setup</h1>\n<p>To follow along with the blog you will need to have the following:</p>\n<ul>\n<li><a href=\"https://nodejs.org/en/download/\">Node</a> installed</li>\n<li><a href=\"https://www.mongodb.com/try/download/community\">MongoDB</a> installed and running on 27017 (default port)</li>\n</ul>\n<p>Alternatively you can check out <a href=\"https://newcurrent.se/blog/containerized-development-environment\">my blog post for using dev containers</a> and follow that guide but select the <code>Node.js &amp; Mongo DB</code> when creating the dev container. If you can&#39;t get the dev container way to work, you can refer to the <a href=\"https://github.com/simon-nystrom/node-mongodb-crud-api\">repository for this blog post</a>.</p>\n<p>The first course of action is to initialize a project in a new folder using <code>npm</code>, in your terminal run the following and complete the project setup:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>mkdir my-crud-api\n<span class=\"hljs-built_in\">cd</span> my-crud-api\nnpm init</code></pre><p>Some basic dependencies are needed to create the API:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>npm install mongoose body-parser express@^5.0.0-alpha.8</code></pre><ul>\n<li><code>mongoose</code> will be used to connect to MongoDB easily and create a schema for the Todo item.</li>\n<li><code>body-parser</code> will be used to enable parsing JSON requests easily.</li>\n<li><code>express</code> will be used to set up the HTTP server, we&#39;ll use the alpha version for 5.0 to simplify our code a little bit.</li>\n</ul>\n<hr>\n<h1 id=\"setting-up-the-web-server\">Setting up the web server</h1>\n<p>Begin by creating a file called <code>index.js</code>. This will be the entry point to our application and it is in this file that we will start and initialize our web server.</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-comment\">// index.js</span>\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;express&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> app = express();\n\n<span class=\"hljs-comment\">// Wrap our starting logic in an async function so we can use await syntax</span>\n<span class=\"hljs-keyword\">const</span> startApplication = <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">await</span> app.listen(<span class=\"hljs-number\">8000</span>);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Listening on 8000...&quot;</span>);\n};\n\nstartApplication();</code></pre><p>Now if you run <code>node index.js</code> in your terminal, your web server should be running and listening on port <code>8000</code>, you can verify that by going to <a href=\"http://localhost:8000\">http://localhost:8000</a> and you should be greeted with the string <code>Cannot GET /</code>. That means your server is working, albeit quite meaningless for now.</p>\n<hr>\n<h1 id=\"creating-the-todo-model-and-router\">Creating the Todo model and router</h1>\n<p>Create a new folder in the root directory of your project and call it <code>src</code>, inside this new folder create two files called <code>todo.js</code> and <code>todoRouter.js</code>.</p>\n<p>We&#39;ll place our model in the <code>todo.js</code> file. This will be the schema defined with help of <code>Mongoose</code> that we installed earlier.</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-comment\">// src/todo.js</span>\n<span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;mongoose&quot;</span>);\n\n<span class=\"hljs-comment\">// Create a mongoose schema, make title and createdAt be the properties and make them required</span>\n<span class=\"hljs-keyword\">const</span> todoSchema = <span class=\"hljs-keyword\">new</span> mongoose.Schema({\n  <span class=\"hljs-attr\">title</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">String</span>, <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span> },\n  <span class=\"hljs-attr\">createdAt</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Date</span>, <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span> },\n});\n\n<span class=\"hljs-keyword\">const</span> Todo = mongoose.model(<span class=\"hljs-string\">&quot;Todo&quot;</span>, todoSchema);\n\n<span class=\"hljs-built_in\">module</span>.exports = Todo;</code></pre><p>This <code>Todo</code> object that we export from <code>src/todo.js</code> is the object that we will use to handle the database connections needed to interact with the database and create, read, update and delete todos. Let&#39;s use it in our router and define routes for all the actions we want to support:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-comment\">// src/todoRouter.js</span>\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;express&quot;</span>);\n<span class=\"hljs-keyword\">const</span> Todo = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./todo&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> todoRouter = express.Router();\n\n<span class=\"hljs-comment\">// List all todos</span>\ntodoRouter.get(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-keyword\">async</span> (_, res) =&gt; {\n  res.json(<span class=\"hljs-keyword\">await</span> Todo.find({}));\n});\n\n<span class=\"hljs-comment\">// Read todo by ID</span>\ntodoRouter.get(<span class=\"hljs-string\">&quot;/:todoId&quot;</span>, <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n  <span class=\"hljs-keyword\">const</span> { todoId } = req.params;\n  res.json(<span class=\"hljs-keyword\">await</span> Todo.findById({ <span class=\"hljs-attr\">_id</span>: todoId }));\n});\n\n<span class=\"hljs-comment\">// Delete todo by ID</span>\ntodoRouter.delete(<span class=\"hljs-string\">&quot;/:todoId&quot;</span>, <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n  <span class=\"hljs-keyword\">const</span> { todoId } = req.params;\n  <span class=\"hljs-keyword\">await</span> Todo.deleteOne({ <span class=\"hljs-attr\">_id</span>: todoId });\n  res.status(<span class=\"hljs-number\">204</span>).send();\n});\n\n<span class=\"hljs-comment\">// Update todo by ID</span>\ntodoRouter.put(<span class=\"hljs-string\">&quot;/:todoId&quot;</span>, <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n  <span class=\"hljs-keyword\">const</span> { title } = req.body;\n  <span class=\"hljs-keyword\">const</span> { todoId } = req.params;\n  res.json(<span class=\"hljs-keyword\">await</span> Todo.updateOne({ <span class=\"hljs-attr\">_id</span>: todoId }, { title }));\n});\n\n<span class=\"hljs-comment\">// Create a todo</span>\ntodoRouter.post(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n  <span class=\"hljs-keyword\">const</span> { title } = req.body;\n  res.json(<span class=\"hljs-keyword\">await</span> Todo.create({ title, <span class=\"hljs-attr\">createdAt</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>() }));\n});\n\n<span class=\"hljs-built_in\">module</span>.exports = todoRouter;</code></pre><hr>\n<h1 id=\"using-the-router-in-our-server\">Using the router in our server</h1>\n<p>Once the two files in the previous example have been created, it&#39;s time to hook the router up to our app and to connect to MongoDB using <code>mongoose</code>:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-comment\">// index.js</span>\n<span class=\"hljs-keyword\">const</span> bodyParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;body-parser&quot;</span>);\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;express&quot;</span>);\n<span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;mongoose&quot;</span>);\n<span class=\"hljs-keyword\">const</span> todoRouter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./src/todoRouter&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> app = express();\n\n<span class=\"hljs-comment\">// Add body-parser middleware to automatically parse JSON requests</span>\napp.use(bodyParser.json());\n<span class=\"hljs-comment\">// Requests done to the base path /todo should go through the todoRouter</span>\napp.use(<span class=\"hljs-string\">&quot;/todo&quot;</span>, todoRouter);\n\n<span class=\"hljs-keyword\">const</span> startApplication = <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">await</span> mongoose.connect(<span class=\"hljs-string\">&quot;mongodb://localhost:27017/todo&quot;</span>, {\n    <span class=\"hljs-attr\">useNewUrlParser</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">useUnifiedTopology</span>: <span class=\"hljs-literal\">true</span>,\n  });\n  <span class=\"hljs-built_in\">console</span>.log(\n    <span class=\"hljs-string\">&quot;Successfully connected to MongoDB at: mongodb://localhost:27017/todo&quot;</span>\n  );\n  <span class=\"hljs-keyword\">await</span> app.listen(<span class=\"hljs-number\">8000</span>);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Listening on 8000...&quot;</span>);\n};\n\nstartApplication();</code></pre><hr>\n<h1 id=\"sending-some-requests\">Sending some requests</h1>\n<p>Once the <code>index.js</code> file has been extended with the additional functionalities above, you can restart your server and we are ready to send some requests using our terminal (you can of course use Postman or Insomnia or other ways of sending requests too):</p>\n<h3 id=\"create-a-todo-note-the-_id\">Create a todo (note the _id):</h3>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>curl -XPOST -H<span class=\"hljs-string\">&#x27;Content-Type:application/json&#x27;</span> -d<span class=\"hljs-string\">&#x27;{&quot;title&quot;: &quot;My first todo!&quot;}&#x27;</span> localhost:8000/todo</code></pre><h3 id=\"update-the-todo-use-the-_id-from-above\">Update the todo (use the _id from above):</h3>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>curl -XPUT -H<span class=\"hljs-string\">&#x27;Content-Type:application/json&#x27;</span> -d<span class=\"hljs-string\">&#x27;{&quot;title&quot;: &quot;My first todo! But updated!&quot;}&#x27;</span> localhost:8000/todo/5f8f221fdb30b30457e23e1c</code></pre><h3 id=\"read-the-todo-use-the-_id-from-above\">Read the todo (use the _id from above):</h3>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>curl -XPUT -H<span class=\"hljs-string\">&#x27;Content-Type:application/json&#x27;</span> -d<span class=\"hljs-string\">&#x27;{&quot;title&quot;: &quot;My first todo! But updated!&quot;}&#x27;</span> localhost:8000/todo/5f8f221fdb30b30457e23e1c</code></pre><h3 id=\"delete-the-todo-use-the-_id-from-above\">Delete the todo (use the _id from above):</h3>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>curl -XDELETE localhost:8000/todo/5f8f221fdb30b30457e23e1c</code></pre><h3 id=\"list-all-todos\">List all todos:</h3>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>curl -H<span class=\"hljs-string\">&#x27;Content-Type:application/json&#x27;</span> localhost:8000/todo</code></pre><hr>\n<p>I hope you learned something. Creating a basic API using the method above is quick and easy if you want to get a prototype up and running fast.</p>\n<p>Enjoy!</p>\n","date":"2020-10-20","title":"Create a CRUD API with Node.js and MongoDB","slug":"crud-api-node-mongodb","summary":"Learn how to create a CRUD API using Node.js, MongoDB and Express.","categories":[],"published":true,"tags":["node","mongodb","express","javascript","mongoose"]},{"html":"<p>If you often work from different machines or on different projects where you want to be able to share a development environment within the team to ensure consistent use of versions and so on, containerizing your development environment is the way to go.</p>\n<p>This post will go through the needed steps to containerizing your development environment for a Node.js project in Visual Studio Code using Docker.</p>\n<hr>\n<h1 id=\"project-setup\">Project setup</h1>\n<p>To follow along with the blog you will need to have the following:</p>\n<ul>\n<li><a href=\"https://code.visualstudio.com/download\">Visual Studio Code</a> installed</li>\n<li>An empty directory opened in Visual Studio Code</li>\n<li><a href=\"https://docs.docker.com/get-docker/\">Docker</a> installed and perferably some prior knowledge of what Docker is and how it works</li>\n</ul>\n<p>Utilizing a development container easily in Visual Studio Code has another requirement: the plugin <code>ms-vscode-remote.remote-containers</code> provisioned by Microsoft. Go ahead and install this in Visual Studio Code, either earch for it on the marketplace inside the editor or run </p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>code --install-extension ms-vscode-remote.remote-containers</code></pre><p>from the command line.</p>\n<p>Once the extension is installed, you need to reload Visual Studio Code to activate the extension.</p>\n<hr>\n<h1 id=\"your-first-dev-container\">Your first dev container</h1>\n<p>Once you&#39;ve completed the previous step, press the key combination <code>CMD + SHIFT + P</code> (Mac) <code>CTRL + SHIFT + P</code> (Windows) to open the command palette. Type <code>remote-containers</code> and you should be greeted with something similar to the image below:</p>\n<p><img src=\"/images/vscode/command_palette_remote_containers.png\" alt=\"Command palette with remote containers search results\"></p>\n<p>To initialize the devcontainer files, select the <code>Remote-Containers: Add Development Container Configuration Files...</code> option and you will get an extensive list presented to you where you get to pick which predefined container definition to use. Since this example will set up a Node.js project, select the <code>Node.js</code> container definition then pick a version, I went with <code>14</code>. If it doesn&#39;t show up, you might have to search for it and click <code>Show all definitions...</code>.</p>\n<p>If you can&#39;t find the <code>Node.js</code> container definition, you can refer to the <code>.devcontainer</code> folder in the <a href=\"https://github.com/simon-nystrom/devcontainer-example\">repository created for this blog post.</a></p>\n<p>When the step above has been completed, you should have a <code>devcontainer.json</code> file open under the <code>.devcontainer</code> folder. This file is generated and contains some helpful starter options and comments. It looks like this:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>{\n    <span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Node.js&quot;</span>,\n    <span class=\"hljs-attr\">&quot;build&quot;</span>: {\n        <span class=\"hljs-attr\">&quot;dockerfile&quot;</span>: <span class=\"hljs-string\">&quot;Dockerfile&quot;</span>,\n        <span class=\"hljs-comment\">// Update &#x27;VARIANT&#x27; to pick a Node version: 10, 12, 14</span>\n        <span class=\"hljs-attr\">&quot;args&quot;</span>: { <span class=\"hljs-attr\">&quot;VARIANT&quot;</span>: <span class=\"hljs-string\">&quot;14&quot;</span> }\n    },\n\n    <span class=\"hljs-comment\">// Set *default* container specific settings.json values on container create.</span>\n    <span class=\"hljs-attr\">&quot;settings&quot;</span>: { \n        <span class=\"hljs-attr\">&quot;terminal.integrated.shell.linux&quot;</span>: <span class=\"hljs-string\">&quot;/bin/bash&quot;</span>\n    },\n\n    <span class=\"hljs-comment\">// Add the IDs of extensions you want installed when the container is created.</span>\n    <span class=\"hljs-attr\">&quot;extensions&quot;</span>: [\n        <span class=\"hljs-string\">&quot;dbaeumer.vscode-eslint&quot;</span>\n    ]\n\n    <span class=\"hljs-comment\">// Use &#x27;forwardPorts&#x27; to make a list of ports inside the container available locally.</span>\n    <span class=\"hljs-comment\">// &quot;forwardPorts&quot;: [],</span>\n\n    <span class=\"hljs-comment\">// Use &#x27;postCreateCommand&#x27; to run commands after the container is created.</span>\n    <span class=\"hljs-comment\">// &quot;postCreateCommand&quot;: &quot;yarn install&quot;,</span>\n\n    <span class=\"hljs-comment\">// Uncomment to connect as a non-root user. See https://aka.ms/vscode-remote/containers/non-root.</span>\n    <span class=\"hljs-comment\">// &quot;remoteUser&quot;: &quot;node&quot;</span>\n}</code></pre><p>It is possible that Visual Studio Code noticed the creation of this <code>.devcontainer</code> folder and might now be prompting you in the bottom right corner to reopen the folder to develop in a container. Go ahead and click <code>Reopen in Container</code> if that is the case. Otherwise you might need to do it manually via the command palette like we did when we created the devcontainer earlier, but type and select the <code>Remote-Containers: Open Folder in Container...</code> option and select the current folder.</p>\n<p>You should now be connected to the dev container, indicated in the bottom left like this:</p>\n<p><img src=\"/images/vscode/dev_container.png\" alt=\"Dev container indicator\"></p>\n<p>You might also have noticed that the open folder in the Explorer window has been appended with <code>[DEV CONTAINER: NODE.JS]</code>.</p>\n<p>Now that we&#39;re connected to our dev container, let&#39;s continue by putting it to use and exploring the benefits.</p>\n<hr>\n<h1 id=\"using-the-dev-container\">Using the dev container</h1>\n<p>Our directory isn&#39;t empty anymore since we now have a <code>.devcontainer</code> folder, however, this folder alone is meaningless. Open an integrated terminal inside Visual Studio Code, this can be done by searching for <code>Terminal: Create New Integrated Terminal</code> in the command palette and selecting it. This will open a terminal inside the dev container.</p>\n<p>Now we&#39;re ready to use Node.js inside the container with the version we specified earlier (<code>14</code> in this case):</p>\n<p><img src=\"/images/vscode/node_dev_container.png\" alt=\"Node running inside the dev container\"></p>\n<hr>\n<h1 id=\"summary\">Summary</h1>\n<p>Using dev containers you can easily reproduce your own development environment on other machines or share the development environment with your team. Dev containers even allow you to install container specific extensions such as in the <code>devcontainer.json</code> example earlier where the extension <code>dbaeumer.vscode-eslint</code> is installed in the container.</p>\n<p>A multitude of dev container templates are available various languages/development environments but you can also just as easily create your own by modifying the generated <code>devcontainer.json</code> and <code>Dockerfile</code> files.</p>\n<p>Another major benefit is that your development environment is now easily backed up to a remote file storage or a Git repository. It&#39;s no longer a major hassle to get your computer set up properly if you make sure to always use dev containers. You also no longer have to worry about running differing versions to what was expected/intended for the project.</p>\n<p>For more advanced usages and more information I recommend the following resources:</p>\n<ul>\n<li><a href=\"https://code.visualstudio.com/docs/remote/containers\">Basics</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/remote/containers-advanced\">Advanced usage</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/remote/troubleshooting#_containers-tips\">Tips &amp; Tricks</a></li>\n</ul>\n<hr>\n","date":"2020-10-19","title":"Containerizing your development environment","slug":"containerized-development-environment","summary":"Learn how to containerize your development environment with Docker and Visual Studio Code.","categories":[],"published":true,"tags":["docker","vscode","node","javascript"]},{"html":"<p>It quickly becomes repetitive typing out all the code needed for forms on the web, with a simple form component you can quickly get started doing what it was you wanted the form for in the first place.</p>\n<p>This post will guide you through the process of designing a simple form component for <a href=\"https://svelte.dev/\">Svelte</a> projects that lets you specify a number of fields and their properties the form component will deal with the rest.</p>\n<p>This guide is aimed at people new to Svelte. To follow along I assume that you know a few things about Svelte already, like how to create and start a project and how a Svelte file is structured. I also assume that you are fairly fluent in HTML, CSS and JavaScript.</p>\n<hr>\n<h1 id=\"project-setup\">Project setup</h1>\n<p>Setup a new Svelte project from the default template by running the following commands:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>npx degit sveltejs/template simple-svelte-form\n<span class=\"hljs-built_in\">cd</span> simple-svelte-form\nnpm run dev</code></pre><p>This scaffolds a Svelte project and starts a local web server at <a href=\"http://localhost:5000\">http://localhost:5000</a> that will reload automatically as you make changes in the project.</p>\n<hr>\n<h1 id=\"creating-the-first-basic-input-component\">Creating the first basic Input component</h1>\n<p>Start by creating a directory called <code>components</code> under <code>src</code> and create a file named <code>Input.svelte</code> here with the following contents:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-comment\">&lt;!-- src/components/Input.svelte --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> value;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> placeholder;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> label;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> name;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> id;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">{id}</span>&gt;</span>{label}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">bind:value</span> {<span class=\"hljs-attr\">placeholder</span>} {<span class=\"hljs-attr\">id</span>} {<span class=\"hljs-attr\">name</span>} <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> /&gt;</span></code></pre><p>This creates a simple Input component where we can specify some predetermined fields. You can read more about <a href=\"https://svelte.dev/docs#Attributes_and_props\">shorthand property notation</a> if you are unsure about how the <code>{placeholder}</code> and the <code>bind:value</code> work.</p>\n<p>Let&#39;s use this in our <code>src/App.svelte</code> component so that we can see what it looks like now:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-comment\">&lt;!-- src/App.svelte --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> Input <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./components/Input.svelte&quot;</span>;\n  <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-string\">&quot;Initial input&quot;</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span>\n    <span class=\"hljs-attr\">bind:value</span>\n    <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span>\n    <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Name&quot;</span>\n    <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;name&quot;</span>\n    <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Enter name...&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></code></pre><p>Now your site should contain a simple labeled input with the value &quot;Initial input&quot; and should be editable in the field.</p>\n<hr>\n<h1 id=\"creating-the-form-component\">Creating the Form component</h1>\n<p>Now that our Input component is working, we need to create a Form component that can wrap this Input field for us in a handy way. Let&#39;s begin by creating a <code>src/components/Form.svelte</code> file:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-comment\">&lt;!-- src/components/Form.svelte --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> Input <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./Input.svelte&quot;</span>;\n\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> onSubmit;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> fields;\n\n  <span class=\"hljs-comment\">// Convert fields from [ { name: &#x27;name&#x27;, value: &#x27;Value&#x27; } ] to { name : Value } which is more useful when submitting a form</span>\n  <span class=\"hljs-keyword\">const</span> fieldsToObject = <span class=\"hljs-function\">(<span class=\"hljs-params\">fields</span>) =&gt;</span>\n    fields.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">p, c</span>) =&gt;</span> ({ ...p, [c.name]: c.value }), {});\n\n  <span class=\"hljs-comment\">// When submitting, turn our fields representation into a JSON body</span>\n  <span class=\"hljs-keyword\">const</span> handleSubmit = <span class=\"hljs-function\">() =&gt;</span> onSubmit(fieldsToObject(fields));\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-pseudo\">:global(input</span>, <span class=\"hljs-selector-tag\">select</span>) {\n    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">5px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- When submitting, prevent the default action which would result in a refreshed page --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">on:submit</span>|<span class=\"hljs-attr\">preventDefault</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> handleSubmit(fields)}&gt;\n    <span class=\"hljs-comment\">&lt;!-- Loop the fields and render the correct representation based on field.type --&gt;</span>\n    {#each fields as field}\n        {#if field.type === &#x27;Input&#x27;}\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{field.value}</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{field.label}</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">{field.placeholder}</span> /&gt;</span>\n        {/if}\n    {/each}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></code></pre><p>Let&#39;s update our <code>src/App.svelte</code> file to use this component:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-comment\">&lt;!-- src/App.svelte --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> Form <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./components/Form.svelte&quot;</span>;\n\n  <span class=\"hljs-comment\">//   Our field representation, let&#x27;s us easily specify several inputs</span>\n  <span class=\"hljs-keyword\">let</span> fields = [\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;firstName&quot;</span>,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Input&quot;</span>,\n      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n      <span class=\"hljs-attr\">placeholder</span>: <span class=\"hljs-string\">&quot;Enter first name...&quot;</span>,\n      <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;First name&quot;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;lastName&quot;</span>,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Input&quot;</span>,\n      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n      <span class=\"hljs-attr\">placeholder</span>: <span class=\"hljs-string\">&quot;Enter last name...&quot;</span>,\n      <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;Last name&quot;</span>,\n    },\n  ];\n\n  <span class=\"hljs-keyword\">let</span> result = {};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span>\n  <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{(body)</span> =&gt;</span> {\n    result = body;\n  }}\n  {fields} /&gt;\n\n<span class=\"hljs-comment\">&lt;!-- Show the current state of our Form --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">code</span>&gt;</span>{JSON.stringify(result, 0, 2)}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">code</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span></code></pre><p>Your page should look something like this after submitting some values in the new Form component:</p>\n<p><img src=\"/images/svelte/svelte_form.png\" alt=\"Form\"></p>\n<hr>\n<h1 id=\"adding-another-field-type-to-our-form-component\">Adding another field type to our Form component</h1>\n<p>Now that we have a Form component that we can extend ourselves, let&#39;s go through how to add a Select field to our form. First, we create a file <code>src/components/Select.svelte</code>:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-comment\">&lt;!-- src/components/Select.svelte --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> value;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> options;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> label;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> id;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">{id}</span>&gt;</span>{label}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">bind:value</span> {<span class=\"hljs-attr\">id</span>}&gt;</span>\n  {#each options as option}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{option.value}</span>&gt;</span>{option.label}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n  {/each}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span></code></pre><p>This component will let us render a Select field that takes options as a property. Now we need to add support for this new component in our <code>src/components/Form.svelte</code> component. Let&#39;s extend the loop over fields to look like this instead:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> Input <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./Input.svelte&quot;</span>;\n  <span class=\"hljs-keyword\">import</span> Select <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./Select.svelte&quot;</span>;\n\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> onSubmit;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> fields;\n\n  <span class=\"hljs-comment\">// Convert fields from [ { name: &#x27;name&#x27;, value: &#x27;Value&#x27; } ] to { name : Value } which is more useful when submitting a form</span>\n  <span class=\"hljs-keyword\">const</span> fieldsToObject = <span class=\"hljs-function\">(<span class=\"hljs-params\">fields</span>) =&gt;</span>\n    fields.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">p, c</span>) =&gt;</span> ({ ...p, [c.name]: c.value }), {});\n\n  <span class=\"hljs-comment\">// When submitting, turn our fields representation into a JSON body</span>\n  <span class=\"hljs-keyword\">const</span> handleSubmit = <span class=\"hljs-function\">() =&gt;</span> onSubmit(fieldsToObject(fields));\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-pseudo\">:global(input</span>, <span class=\"hljs-selector-tag\">select</span>) {\n    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">5px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- When submitting, prevent the default action which would result in a refreshed page --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">on:submit</span>|<span class=\"hljs-attr\">preventDefault</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> handleSubmit(fields)}&gt;\n    <span class=\"hljs-comment\">&lt;!-- Loop the fields and render the correct representation based on field.type --&gt;</span>\n    {#each fields as field}\n        {#if field.type === &#x27;Input&#x27;}\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{field.value}</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{field.label}</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">{field.placeholder}</span> /&gt;</span>\n        {:else if field.type === &quot;Select&quot;}\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Select</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{field.value}</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{field.label}</span> <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{field.options}/</span>&gt;</span>\n        {/if}\n    {/each}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></code></pre><p>We also need to add another field to our <code>src/App.svelte</code> so that it shows up on our page:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> Form <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./components/Form.svelte&quot;</span>;\n\n  <span class=\"hljs-comment\">//   Our field representation, let&#x27;s us easily specify several inputs</span>\n  <span class=\"hljs-keyword\">let</span> fields = [\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;firstName&quot;</span>,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Input&quot;</span>,\n      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n      <span class=\"hljs-attr\">placeholder</span>: <span class=\"hljs-string\">&quot;Enter first name...&quot;</span>,\n      <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;First name&quot;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;lastName&quot;</span>,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Input&quot;</span>,\n      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n      <span class=\"hljs-attr\">placeholder</span>: <span class=\"hljs-string\">&quot;Enter last name...&quot;</span>,\n      <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;Last name&quot;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;favoriteColor&quot;</span>,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Select&quot;</span>,\n      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;green&quot;</span>,\n      <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;Favorite color&quot;</span>,\n      <span class=\"hljs-attr\">options</span>: [\n        { <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;Red&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;red&quot;</span> },\n        { <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;Green&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;green&quot;</span> },\n        { <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;Blue&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;blue&quot;</span> },\n      ],\n    },\n  ];\n\n  <span class=\"hljs-keyword\">let</span> result = {};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span>\n  <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{(body)</span> =&gt;</span> {\n    result = body;\n  }}\n  {fields} /&gt;\n\n<span class=\"hljs-comment\">&lt;!-- Show the current state of our Form --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">code</span>&gt;</span>{JSON.stringify(result, 0, 2)}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">code</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span></code></pre><p>After all this is done, your page should now look something like the following after pressing submit:</p>\n<p><img src=\"/images/svelte/svelte_form_1.png\" alt=\"Form\"></p>\n<hr>\n<h1 id=\"summary\">Summary</h1>\n<p>You now have a Form component that you can extend with styling and other types of fields as you wish that you can use to easily create JSON bodies that can be sent to backend services or used for other purposes on the front end. Having a Form component like this that handles all the logic around transforming the data from a representation of fields to a JSON-like body is really nice for quick prototyping or just all around generic forms that follow the same rules without custom logic.</p>\n<p>It&#39;s now up to you to build upon this to add validation, other field types, styling etc. ðŸ˜Ž</p>\n<p>The repository for this project can be found <a href=\"https://github.com/simon-nystrom/simple-svelte-form\">here</a>.</p>\n<hr>\n","date":"2020-10-09","title":"Create a simple Form component in Svelte","slug":"simple-svelte-form","summary":"Learn how to create a simple form component for Svelte.","categories":[],"published":true,"tags":["svelte","javascript"]},{"html":"<p>This post will go through the steps needed to setup a working MongoDB environment inside a Docker container on your local machine. The benefits of having MongoDB inside a container on your local machine is that you can easily change versions and use different MongoDB instances without having to have multiple different versions installed. It also allows you to share your MongoDB setup with your team so that everyone can connect to a similar local database that can be used for testing and development.</p>\n<p>You need to have Docker installed to be able to follow this guide, instructions for this can be found <a href=\"https://docs.docker.com/get-docker/\">here</a>. I am using version <code>2.4.0.0 (48506)</code> at the time of writing.</p>\n<p>Disclaimer: The following approach stores data inside the container itself, meaning that <strong>you will lose all your data if you remove the container!</strong> This is intended to be used for development and testing purposes.</p>\n<hr>\n<h1 id=\"running-the-mongodb-instance\">Running the MongoDB instance</h1>\n<p>It&#39;s surprisingly easy to get this up and running.</p>\n<p>Run the following command from a terminal window:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>docker run -p27017:27017 --name my-mongodb-container -d mongo:latest</code></pre><p>This will:</p>\n<ul>\n<li>Start the <code>mongo:latest</code> image in a container</li>\n<li>Detach the container <code>-d</code></li>\n<li>Name it <code>my-mongodb-container</code></li>\n<li>Map the container port <code>27017</code> to our own machine&#39;s <code>27017</code></li>\n</ul>\n<p>You can find more tags <a href=\"https://hub.docker.com/_/mongo\">here</a> if you don&#39;t want to use the <code>latest</code> version.</p>\n<hr>\n<h1 id=\"connecting-to-the-mongodb-instance\">Connecting to the MongoDB instance</h1>\n<p>Now that we have a MongoDB container up and running, we can try to connect to it using the following command:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>docker run -it --rm mongo mongo --host host.docker.internal</code></pre><p>This will:</p>\n<ul>\n<li>Start the <code>mongo</code> image in a container</li>\n<li>Using interactive mode <code>-it</code></li>\n<li>Removing the container once we exit <code>--rm</code></li>\n<li>Run the <code>mongo</code> command inside the container, with the argument <code>--host host.docker.internal</code></li>\n</ul>\n<p>The <code>host.docker.internal</code> address is special and can be used as a workaround to <a href=\"https://docs.docker.com/docker-for-mac/networking/#use-cases-and-workarounds\">connect to the host machine from a container</a>.</p>\n<hr>\n<p>That&#39;s all there is to it. You should be able to go ahead and use this container instance of MongoDB now for local development and testing purposes.</p>\n","date":"2020-10-04","title":"Setting up MongoDB in Docker for development","slug":"docker-mongodb-development","summary":"Learn how to setup MongoDB using Docker on your local machine.","categories":[],"published":true,"tags":["docker","mongodb"]},{"html":"<p>The blog where you&#39;re reading this is built using the tools mentioned in this post. It&#39;s not a replica but it has a similar setup, just more focused on the blog setup. This post will guide you through the process of creating your own blog by combining <a href=\"https://svelte.dev/\">Svelte</a>, <a href=\"https://sapper.svelte.dev/\">Sapper</a> and <a href=\"https://www.github.com\">GitHub</a> Pages (free). The focus will be on creating a blog with these tools and not so much the details of Svelte and Sapper.</p>\n<p>Note that even though this project will use GitHub pages as its deployment method, it is in no way required to be deployed to GitHub pages. There is a clear decoupling of the blog itself and its method of deployment.</p>\n<hr>\n<h1 id=\"project-setup\">Project setup</h1>\n<p>To follow along with the blog you will need to have the following:</p>\n<ul>\n<li><code>node</code> 8.2.0 or later (for <code>npx</code> support)</li>\n<li>A GitHub account</li>\n<li>An empty (uninitialized) GitHub public repository named <em>username</em>.github.io where <em>username</em> is your username at GitHub</li>\n<li>Access to your GitHub account through the terminal</li>\n</ul>\n<p>When you&#39;re all set up and ready to go, let&#39;s begin. Begin by running the following commands in a terminal window (replace <code>&lt;username&gt;</code> by your GitHub username):</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>npx degit <span class=\"hljs-string\">&quot;sveltejs/sapper-template#rollup&quot;</span> &lt;username&gt;.github.io\n<span class=\"hljs-built_in\">cd</span> &lt;username&gt;.github.io\nnpm install</code></pre><p>This will execute <a href=\"https://github.com/Rich-Harris/degit\"><code>degit</code></a> with <code>npx</code> to scaffold a Sapper template project in a folder called <code>&lt;username&gt;.github.io</code> and change your working directory into said folder and install the required <code>npm</code> dependencies.</p>\n<p>If you want to see what your site looks like at this point, you can go ahead and run:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>npm run dev</code></pre><p>This will start the local development server at <a href=\"http://localhost:3000\">http://localhost:3000</a>.</p>\n<p>Now it&#39;s time to open the project in your favorite code editor. You should have a folder structure similar to the image below at this point:</p>\n<p><img src=\"/images/sapper/sapper_folder_structure.png\" alt=\"Folder structure\"></p>\n<p>The files/folders that we will be interacting with are listed below:</p>\n<ul>\n<li><code>__sapper__</code>, Sapper files such as the dev, build and export bundles.</li>\n<li><code>src</code> the source code for the site</li>\n<li><code>static</code> resources needed for the page to run, these are included in the built version</li>\n</ul>\n<p>You can run the following command if you&#39;d like to clean up the project a bit (removing files we won&#39;t be using) so that it contains fewer files as we start to modify the template to suit our needs. Make sure your working directory is still set to <code>&lt;username&gt;.github.io</code>.</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>rm -r scripts static/*.png static/*.jpg</code></pre><p>Since this blog post is focused on enabling blogging functionality, let&#39;s simplify our site a some more. Remove the list item containing the link to <strong>about</strong> in the <code>src/components/Nav.svelte</code> file and delete the file <code>src/routes/about.svelte</code>. Your site should now only have two items in the nav bar, like the image below:</p>\n<p><img src=\"/images/sapper/sapper_nav_bar.png\" alt=\"Nav bar\"></p>\n<p>Now would also be a great time to personalize the <code>src/routes/index.svelte</code> file. I will leave it as it is and move on to the blog portion of the site.</p>\n<hr>\n<h1 id=\"enabling-markdown-support\">Enabling Markdown support</h1>\n<p>As it stands, the blog posts and their content is hard coded and static, located inside the <code>src/routes/blog/_posts.js</code> file and aren&#39;t able to be written in <a href=\"https://en.wikipedia.org/wiki/Markdown\">Markdown</a> just yet. To change that, we&#39;ll need to install some extra libraries that can help us convert Markdown files into a format suitable to us:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>npm install -D marked highlight.js front-matter</code></pre><p>We also need to add a CSS theme to make <code>highlight.js</code> do something, go to <a href=\"https://highlightjs.org/static/demo/\">https://highlightjs.org/static/demo/</a> and pick a theme and then include it in the <code>src/template.html</code> like so:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span>\n  <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span>\n  <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/styles/atom-one-dark-reasonable.min.css&quot;</span>\n/&gt;</span></code></pre><p>I like keeping my blog posts separate from the code itself since they should be independent of where they are rendered vice versa. Let&#39;s create a <code>posts</code> directory alongside our <code>src</code> and <code>static</code> folders.</p>\n<p>Now we can start rewriting <code>src/routes/blog/_posts.js</code> to suit our needs. We&#39;ll write some code that can take a Markdown file, including YAML front matter and parse it into something that can be used programmatically. You can replace the contents in <code>src/routes/blog/_posts.js</code> with the following code:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-comment\">// src/routes/blog/_posts.js</span>\n\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);\n<span class=\"hljs-keyword\">const</span> fm = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;front-matter&quot;</span>);\n<span class=\"hljs-keyword\">const</span> marked = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;marked&quot;</span>);\n<span class=\"hljs-keyword\">const</span> hljs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;highlight.js&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> files = fs.readdirSync(<span class=\"hljs-string\">&quot;posts&quot;</span>);\n\n<span class=\"hljs-comment\">// Use highlight.js as the highlighter for the marked library</span>\nmarked.setOptions({\n  <span class=\"hljs-attr\">highlight</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">code, lang</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> hljs.highlight(lang, code).value;\n  },\n});\n\n<span class=\"hljs-keyword\">const</span> posts = [];\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; files.length; i++) {\n  <span class=\"hljs-keyword\">const</span> content = fs.readFileSync(<span class=\"hljs-string\">`posts/<span class=\"hljs-subst\">${files[i]}</span>`</span>, { <span class=\"hljs-attr\">encoding</span>: <span class=\"hljs-string\">&quot;utf-8&quot;</span> });\n  <span class=\"hljs-comment\">// Use the front-matter library to separate the body from the front matter</span>\n  <span class=\"hljs-keyword\">const</span> { body, ...frontMatter } = fm(content);\n  <span class=\"hljs-comment\">// Use the marked library to turn markdown into html</span>\n  <span class=\"hljs-keyword\">const</span> html = marked(body);\n  posts.push({ html, ...frontMatter.attributes });\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> posts;</code></pre><p>The code above will read the contents of the posts located in the <code>posts</code> folder and create an array of the posts and their contents so that we can access these posts programmatically.</p>\n<hr>\n<h1 id=\"creating-your-first-post\">Creating your first post</h1>\n<p>Now that we&#39;ve prepared the code to parse our Markdown files, we can create our first post. Create a file in the <code>posts</code> folder we created earlier called <code>my-first-blog.md</code> with the following content:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>---\ntitle: \"My first blog post\"\nslug: \"my-first-blog\"\n---\n\n## Look at the `title` above, it's straight out of the front matter! â†–\n\nThe slug is what's used to navigate/link to this specific post, visible right now in the URL.\n</code></pre><p>Now you should be able to restart the local development server by re-running <code>npm run dev</code>. Now visit <a href=\"http://localhost:3000/blog\">http://localhost:3000/blog</a> and see your newly created post in the list of recent posts, click the link and it should navigate you to the post.</p>\n<hr>\n<h1 id=\"deploying-to-github-pages\">Deploying to GitHub Pages</h1>\n<p>First, we need to make our project into a Git repository and push it to GitHub. To do this, we&#39;ll initialize our current directory (should still be <code>&lt;username&gt;.github.io</code>) as a Git repository, stage all the files and create our first commit. Finally we also need to push it to GitHub:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>git init\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add origin https://github.com/temporary-duck/<username>.io.git\ngit push -u origin master</code></pre><p>Once that&#39;s done, we&#39;ll install one final dependency to make it easy for us to deploy the site:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>npm install -D gh-pages</code></pre><p>We&#39;ll also add this as a new script called <code>deploy</code> to our <code>package.json</code>&#39;s <code>scripts</code> section:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>&quot;scripts&quot;: {\n    &quot;dev&quot;: &quot;sapper dev&quot;,\n    &quot;build&quot;: &quot;sapper build --legacy&quot;,\n    &quot;export&quot;: &quot;sapper export --legacy&quot;,\n    &quot;start&quot;: &quot;node __sapper__/build&quot;,\n    &quot;deploy&quot;: &quot;sapper export --legacy &amp;&amp;  gh-pages -d __sapper__/export&quot;\n},</code></pre><p>The new script will make sure that we <code>sapper export</code> our latest changes before deploying the <code>__sapper__/export</code> folder to GitHub Pages. <code>gh-pages</code> will create a branch in our repository called <code>gh-pages</code> and this branch is what will be deployed to your site at <code>&lt;username&gt;.github.io</code>, where username is your username at GitHub.</p>\n<p>Now you&#39;re all set to simply deploy the site by running:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>npm run deploy</code></pre><p>We&#39;re close to being done now, only one step left. We have to set the <code>gh-pages</code> branch that was just deployed as the main branch for GitHub Pages to read from. To do this, visit the GitHub repository you created for your blog, go to settings and scroll down until you see the <strong>GitHub Pages</strong> section. Under <strong>Source</strong> you have to change the branch to the <code>gh-pages</code> branch. It might take a few minutes until your page is correctly deployed to <code>&lt;username&gt;.github.io</code>.</p>\n<p>That&#39;s it. All done. Enjoy your newly created and freely hosted blog! ðŸ¥³</p>\n<hr>\n","date":"2020-09-27","title":"Creating a blog with Svelte, Sapper and GitHub Pages","slug":"create-markdown-sapper-svelte-blog","summary":"Learn how to create your own blog using Svelte, Sapper, Markdown and how to host it for free on GitHub Pages.","categories":[],"published":true,"tags":["svelte","sapper","markdown","javascript","blog","github","rollup"]}]},"__N_SSG":true}