{"pageProps":{"post":{"html":"<p>This tutorial series shows you how to create a blog similar to the one on my site: <a href=\"https://newcurrent.se\">https://newcurrent.se</a>, and how to host it on GitHub Pages, it won&#39;t be locked to host on GitHub Pages though, the result will be a site that is able to be statically exported and hosted anywhere.</p>\n<p>I made a post in the past describing how to create a blog using Sapper, but I&#39;ve decided to migrate to <a href=\"https://nextjs.org/\"><code>Next.js</code></a> because I&#39;m more versed in React and I wanted to try something new. I&#39;ve used Gatsby in the past so I thought, why not try Next.js this time.</p>\n<hr>\n<h1 id=\"prerequisites\">Prerequisites</h1>\n<p>You don&#39;t need a lot of programming experience to follow this tutorial, I wouldn&#39;t recommend this tutorial series unless you have some HTML, CSS and JavaScript knowledge and some knowledge of how <code>React</code> works though. The focus will be more on how <code>Next.js</code> can help us build our blog rather than what <code>React</code> helps us do. You are also expected how to use GitHub to create a repository.</p>\n<p>All you really need other than that is a <code>node</code> version that is high enough to support <code>npx</code> and a GitHub account.</p>\n<p>I will be using <code>yarn</code> for this project, but using <code>npm</code> is fine as well. The syntax varies slightly but generally <code>yarn</code> does not need to specify <code>run</code> to run something, see example below:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>yarn dev\n<span class=\"hljs-comment\"># is the same as</span>\nnpm run dev</code></pre><p>Let&#39;s get started ðŸ˜Š</p>\n<hr>\n<h1 id=\"initializing-the-project\">Initializing the project</h1>\n<p>To initialize a new <code>Next.js</code> project, all we have to do is run the following code:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>npx create-next-app my-blog\n<span class=\"hljs-built_in\">cd</span> my-blog</code></pre><p>This will create a project in a folder called <code>my-blog</code> (you can name it whatever you want) and set up all the basics needed for the project and then change your working directory to be <code>my-blog</code>.</p>\n<p>If you want to try running the app already, you can do so by running <code>yarn dev</code> or <code>npm run dev</code> and visiting <a href=\"http://localhost:3000\">http://localhost:3000</a>.</p>\n<hr>\n<h1 id=\"file-overview-and-walkthrough\">File overview and walkthrough</h1>\n<p>Let&#39;s look at the file and directory tree that <code>create-next-app</code> created for us:</p>\n<p><img src=\"/images/next/nextjs_folder_structure.png\" alt=\"Next.js folder structure\"></p>\n<h3 id=\"next\">.next</h3>\n<p>Contains files needed by the Next.js framework. No need to touch this folder.</p>\n<h3 id=\"node_modules\">node_modules</h3>\n<p>Contains dependencies for our project. No need to touch this folder.</p>\n<h3 id=\"pages\">pages</h3>\n<p>This folder is used by Next.js. It looks here at our JavaScript files to determine what the routes in our page will look like and how they will work. We&#39;ll go through this in more detail further down the page. This is the primary folder used in a Next.js project.</p>\n<h3 id=\"public\">public</h3>\n<p>This is where you put all the things that you want to be reached statically on your hosted site like images and the favicon.</p>\n<h3 id=\"styles\">styles</h3>\n<p>Use this folder for your global CSS stylesheets and your CSS modules. You can remove the <code>Home.module.css</code> file from this folder as we won&#39;t be using that.</p>\n<p>Those are the folders in a Next.js project, we&#39;ll probably create a component directory later where we can organize our React components, but for now this is all we have. Let&#39;s go through the contents of the <code>pages</code> folder.</p>\n<h2 id=\"the-pages-folder\">The pages folder</h2>\n<p>First of all, let&#39;s remove the <code>api</code> folder, we don&#39;t need that.</p>\n<p>Let&#39;s look at <code>_app.js</code> and <code>index.js</code> a bit closer, they are important.</p>\n<h4 id=\"_appjs\">_app.js</h4>\n<p><code>_app.js</code> looks like this:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;../styles/globals.css&#x27;</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyApp</span>(<span class=\"hljs-params\">{ Component, pageProps }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Component</span> {<span class=\"hljs-attr\">...pageProps</span>} /&gt;</span></span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> MyApp</code></pre><p>Seems very innocuous, and it is at this stage. The <code>_app.js</code> is executed for all your pages defined in the <code>pages</code> directory, it is passed to the <code>MyApp</code> function as the <code>Component</code> argument and is accessible here. We&#39;ll be using the <code>MyApp</code> component in another part of this tutorial series to define things we want present on all pages, like a header and a footer. For now this code does nothing but return the page as it is handed to it.</p>\n<h4 id=\"indexjs\">index.js</h4>\n<p><code>index.js</code> is a big longer and we&#39;ll actually remove the majority of it, you want your <code>index.js</code> to look like this before moving on with the next part of this tutorial: </p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Home</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Home sweet home&quot;</span>;\n}</code></pre><p>This <code>index.js</code> file is what will be served when we visit the root of our site. Start your project by running <code>yarn dev</code> and then visit <a href=\"http://localhost:3000/\">http://localhost:3000/</a> and you should see a very basic web site that just says <em>Home sweet home</em>.</p>\n<hr>\n<h1 id=\"adding-our-project-to-github\">Adding our project to GitHub</h1>\n<p>Only storing our code locally is not very safe or good practice, let&#39;s create a repository on GitHub and push our code there. Since this is one of the prerequisites, I assume you already know how to do this. Just make sure the project you create is an empty project that is not initialized with any files like a <code>README.md</code> or a license file.</p>\n<p>Once you&#39;ve created your GitHub account, follow the steps they provide:</p>\n<pre><div class=\"copy-me\" onclick=\"copyCode(this)\">Copy</div><code>git remote add origin git@github.com:&lt;your_username&gt;/&lt;your_github_project&gt;.git\ngit branch -M main\ngit push -u origin main</code></pre><hr>\n<p>Now we have a very basic <code>Next.js</code> set up and ready to go for the next part of this tutorial series.</p>\n<p>Here&#39;s what my project looks like at this stage: <a href=\"https://github.com/simon-nystrom/nextjs-blog-example/tree/p1\">https://github.com/simon-nystrom/nextjs-blog-example/tree/p1</a></p>\n<p>I hope you&#39;ll follow along with the tutorial, please don&#39;t hesitate to ask if you have any questions or tell me if I missed something!</p>\n","date":"2020-11-05","slug":"react-nextjs-blog","title":"Getting the basics set up","categories":[],"tags":["react","javascript","nextjs","tutorial"],"summary":"Initialize a Next.js project and get it up and running with some basic pages."}},"__N_SSG":true}