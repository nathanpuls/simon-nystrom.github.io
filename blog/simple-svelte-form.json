{"html":"<p>It quickly becomes repetitive typing out all the code needed for forms on the web, with a simple form component you can quickly get started doing what it was you wanted the form for in the first place.</p>\n<p>This post will guide you through the process of designing a simple form component for <a href=\"https://svelte.dev/\">Svelte</a> projects that lets you specify a number of fields and their properties the form component will deal with the rest.</p>\n<p>This guide is aimed at people new to Svelte. To follow along I assume that you know a few things about Svelte already, like how to create and start a project and how a Svelte file is structured. I also assume that you are fairly fluent in HTML, CSS and JavaScript.</p>\n<hr>\n<h1 id=\"project-setup\">Project setup</h1>\n<p>Setup a new Svelte project from the default template by running the following commands:</p>\n<pre><code class=\"language-bash\">npx degit sveltejs/template simple-svelte-form\n<span class=\"hljs-built_in\">cd</span> simple-svelte-form\nnpm run dev</code></pre>\n<p>This scaffolds a Svelte project and starts a local web server at <a href=\"http://localhost:5000\">http://localhost:5000</a> that will reload automatically as you make changes in the project.</p>\n<hr>\n<h1 id=\"creating-the-first-basic-input-component\">Creating the first basic Input component</h1>\n<p>Start by creating a directory called <code>components</code> under <code>src</code> and create a file named <code>Input.svelte</code> here with the following contents:</p>\n<pre><code class=\"language-html\"><span class=\"hljs-comment\">&lt;!-- src/components/Input.svelte --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> value;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> placeholder;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> label;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> name;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> id;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">{id}</span>&gt;</span>{label}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">bind:value</span> {<span class=\"hljs-attr\">placeholder</span>} {<span class=\"hljs-attr\">id</span>} {<span class=\"hljs-attr\">name</span>} <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> /&gt;</span></code></pre>\n<p>This creates a simple Input component where we can specify some predetermined fields. You can read more about <a href=\"https://svelte.dev/docs#Attributes_and_props\">shorthand property notation</a> if you are unsure about how the <code>{placeholder}</code> and the <code>bind:value</code> work.</p>\n<p>Let&#39;s use this in our <code>src/App.svelte</code> component so that we can see what it looks like now:</p>\n<pre><code class=\"language-html\"><span class=\"hljs-comment\">&lt;!-- src/App.svelte --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> Input <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./components/Input.svelte&quot;</span>;\n  <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-string\">&quot;Initial input&quot;</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span>\n    <span class=\"hljs-attr\">bind:value</span>\n    <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span>\n    <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Name&quot;</span>\n    <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;name&quot;</span>\n    <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Enter name...&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></code></pre>\n<p>Now your site should contain a simple labeled input with the value &quot;Initial input&quot; and should be editable in the field.</p>\n<hr>\n<h1 id=\"creating-the-form-component\">Creating the Form component</h1>\n<p>Now that our Input component is working, we need to create a Form component that can wrap this Input field for us in a handy way. Let&#39;s begin by creating a <code>src/components/Form.svelte</code> file:</p>\n<pre><code class=\"language-html\"><span class=\"hljs-comment\">&lt;!-- src/components/Form.svelte --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> Input <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./Input.svelte&quot;</span>;\n\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> onSubmit;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> fields;\n\n  <span class=\"hljs-comment\">// Convert fields from [ { name: &#x27;name&#x27;, value: &#x27;Value&#x27; } ] to { name : Value } which is more useful when submitting a form</span>\n  <span class=\"hljs-keyword\">const</span> fieldsToObject = <span class=\"hljs-function\">(<span class=\"hljs-params\">fields</span>) =&gt;</span>\n    fields.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">p, c</span>) =&gt;</span> ({ ...p, [c.name]: c.value }), {});\n\n  <span class=\"hljs-comment\">// When submitting, turn our fields representation into a JSON body</span>\n  <span class=\"hljs-keyword\">const</span> handleSubmit = <span class=\"hljs-function\">() =&gt;</span> onSubmit(fieldsToObject(fields));\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-pseudo\">:global(input</span>, <span class=\"hljs-selector-tag\">select</span>) {\n    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">5px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- When submitting, prevent the default action which would result in a refreshed page --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">on:submit</span>|<span class=\"hljs-attr\">preventDefault</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> handleSubmit(fields)}&gt;\n    <span class=\"hljs-comment\">&lt;!-- Loop the fields and render the correct representation based on field.type --&gt;</span>\n    {#each fields as field}\n        {#if field.type === &#x27;Input&#x27;}\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{field.value}</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{field.label}</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">{field.placeholder}</span> /&gt;</span>\n        {/if}\n    {/each}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></code></pre>\n<p>Let&#39;s update our <code>src/App.svelte</code> file to use this component:</p>\n<pre><code class=\"language-html\"><span class=\"hljs-comment\">&lt;!-- src/App.svelte --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> Form <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./components/Form.svelte&quot;</span>;\n\n  <span class=\"hljs-comment\">//   Our field representation, let&#x27;s us easily specify several inputs</span>\n  <span class=\"hljs-keyword\">let</span> fields = [\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;firstName&quot;</span>,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Input&quot;</span>,\n      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n      <span class=\"hljs-attr\">placeholder</span>: <span class=\"hljs-string\">&quot;Enter first name...&quot;</span>,\n      <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;First name&quot;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;lastName&quot;</span>,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Input&quot;</span>,\n      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n      <span class=\"hljs-attr\">placeholder</span>: <span class=\"hljs-string\">&quot;Enter last name...&quot;</span>,\n      <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;Last name&quot;</span>,\n    },\n  ];\n\n  <span class=\"hljs-keyword\">let</span> result = {};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span>\n  <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{(body)</span> =&gt;</span> {\n    result = body;\n  }}\n  {fields} /&gt;\n\n<span class=\"hljs-comment\">&lt;!-- Show the current state of our Form --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">code</span>&gt;</span>{JSON.stringify(result, 0, 2)}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">code</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span></code></pre>\n<p>Your page should look something like this after submitting some values in the new Form component:</p>\n<p><img src=\"./images/svelte/svelte_form.png\" alt=\"Form\"></p>\n<hr>\n<h1 id=\"adding-another-field-type-to-our-form-component\">Adding another field type to our Form component</h1>\n<p>Now that we have a Form component that we can extend ourselves, let&#39;s go through how to add a Select field to our form. First, we create a file <code>src/components/Select.svelte</code>:</p>\n<pre><code class=\"language-html\"><span class=\"hljs-comment\">&lt;!-- src/components/Select.svelte --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> value;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> options;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> label;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> id;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">{id}</span>&gt;</span>{label}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">bind:value</span> {<span class=\"hljs-attr\">id</span>}&gt;</span>\n  {#each options as option}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{option.value}</span>&gt;</span>{option.label}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n  {/each}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span></code></pre>\n<p>This component will let us render a Select field that takes options as a property. Now we need to add support for this new component in our <code>src/components/Form.svelte</code> component. Let&#39;s extend the loop over fields to look like this instead:</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> Input <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./Input.svelte&quot;</span>;\n  <span class=\"hljs-keyword\">import</span> Select <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./Select.svelte&quot;</span>;\n\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> onSubmit;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> fields;\n\n  <span class=\"hljs-comment\">// Convert fields from [ { name: &#x27;name&#x27;, value: &#x27;Value&#x27; } ] to { name : Value } which is more useful when submitting a form</span>\n  <span class=\"hljs-keyword\">const</span> fieldsToObject = <span class=\"hljs-function\">(<span class=\"hljs-params\">fields</span>) =&gt;</span>\n    fields.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">p, c</span>) =&gt;</span> ({ ...p, [c.name]: c.value }), {});\n\n  <span class=\"hljs-comment\">// When submitting, turn our fields representation into a JSON body</span>\n  <span class=\"hljs-keyword\">const</span> handleSubmit = <span class=\"hljs-function\">() =&gt;</span> onSubmit(fieldsToObject(fields));\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-pseudo\">:global(input</span>, <span class=\"hljs-selector-tag\">select</span>) {\n    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">5px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- When submitting, prevent the default action which would result in a refreshed page --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">on:submit</span>|<span class=\"hljs-attr\">preventDefault</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> handleSubmit(fields)}&gt;\n    <span class=\"hljs-comment\">&lt;!-- Loop the fields and render the correct representation based on field.type --&gt;</span>\n    {#each fields as field}\n        {#if field.type === &#x27;Input&#x27;}\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{field.value}</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{field.label}</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">{field.placeholder}</span> /&gt;</span>\n        {:else if field.type === &quot;Select&quot;}\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Select</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">{field.value}</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{field.label}</span> <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{field.options}/</span>&gt;</span>\n        {/if}\n    {/each}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></code></pre>\n<p>We also need to add another field to our <code>src/App.svelte</code> so that it shows up on our page:</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> Form <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./components/Form.svelte&quot;</span>;\n\n  <span class=\"hljs-comment\">//   Our field representation, let&#x27;s us easily specify several inputs</span>\n  <span class=\"hljs-keyword\">let</span> fields = [\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;firstName&quot;</span>,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Input&quot;</span>,\n      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n      <span class=\"hljs-attr\">placeholder</span>: <span class=\"hljs-string\">&quot;Enter first name...&quot;</span>,\n      <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;First name&quot;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;lastName&quot;</span>,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Input&quot;</span>,\n      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n      <span class=\"hljs-attr\">placeholder</span>: <span class=\"hljs-string\">&quot;Enter last name...&quot;</span>,\n      <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;Last name&quot;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;favoriteColor&quot;</span>,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;Select&quot;</span>,\n      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;green&quot;</span>,\n      <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;Favorite color&quot;</span>,\n      <span class=\"hljs-attr\">options</span>: [\n        { <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;Red&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;red&quot;</span> },\n        { <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;Green&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;green&quot;</span> },\n        { <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;Blue&quot;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;blue&quot;</span> },\n      ],\n    },\n  ];\n\n  <span class=\"hljs-keyword\">let</span> result = {};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span>\n  <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{(body)</span> =&gt;</span> {\n    result = body;\n  }}\n  {fields} /&gt;\n\n<span class=\"hljs-comment\">&lt;!-- Show the current state of our Form --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">code</span>&gt;</span>{JSON.stringify(result, 0, 2)}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">code</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span></code></pre>\n<p>After all this is done, your page should now look something like the following after pressing submit:</p>\n<p><img src=\"./images/svelte/svelte_form_1.png\" alt=\"Form\"></p>\n<hr>\n<h1 id=\"summary\">Summary</h1>\n<p>You now have a Form component that you can extend with styling and other types of fields as you wish that you can use to easily create JSON bodies that can be sent to backend services or used for other purposes on the front end. Having a Form component like this that handles all the logic around transforming the data from a representation of fields to a JSON-like body is really nice for quick prototyping or just all around generic forms that follow the same rules without custom logic.</p>\n<p>It&#39;s now up to you to build upon this to add validation, other field types, styling etc. 😎</p>\n<p>The repository for this project can be found <a href=\"https://github.com/simon-nystrom/simple-svelte-form\">here</a>.</p>\n<hr>\n","date":"2020-10-09","slug":"simple-svelte-form","title":"Create a simple Form component in Svelte","categories":[],"tags":["svelte","javascript"],"summary":"Learn how to create a simple form component for Svelte."}